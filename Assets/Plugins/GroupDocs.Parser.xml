<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GroupDocs.Parser</name>
  </assembly>
  <members>
    <member name="T:GroupDocs.Parser.License">
      <summary>
            Provides methods to license the component. Learn more about licensing <see href="https://purchase.groupdocs.com/faqs/licensing">here</see>. 
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.License.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.License" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <param name="filePath">Absolute path to license file.</param>
      <example>
        <para>
            The following example demonstrates how to set a license passing a path to the license file. 
            </para>
        <code lang="c#">
            string licensePath = "LicenseFile.lic"";
            GroupDocs.Parser.License license = new GroupDocs.Parser.License();
            lic.SetLicense(licensePath);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">License stream.</param>
      <example>
        <para>
            The following example demonstrates how to set a license passing Stream of the license file. 
            </para>
        <code lang="c#">
            using (FileStream licenseStream = new FileStream("LicenseFile.lic", FileMode.Open))
            {
                GroupDocs.Parser.License license = new GroupDocs.Parser.License();
                license.SetLicense(licenseStream);
            }
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Parser.Metered">
      <summary>
             Provides methods for applying <see href="https://purchase.groupdocs.com/faqs/licensing/metered">Metered</see> license. 
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Metered.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Metered" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Metered.SetMeteredKey(System.String,System.String)">
      <summary>
             Activates product with Metered keys. 
            </summary>
      <param name="publicKey">A public key.</param>
      <param name="privateKey">A private key</param>
      <example>
        <para>
            Following example demonstrates how to activate product with Metered keys. 
            </para>
        <code lang="c#">
            string publicKey = "Public Key";
            string privateKey = "Private Key";
            
            Metered metered = new Metered();
            metered.SetMeteredKey(publicKey, privateKey);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Metered.GetConsumptionQuantity">
      <summary>
             Retrieves amount of MBs processed. 
            </summary>
      <returns>A decimal value that represents the consumption quantity.</returns>
      <example>
        <para>
            Following example demonstrates how to retrieve amount of MBs processed. 
            </para>
        <code lang="c#">
            string publicKey = "Public Key";
            string privateKey = "Private Key";
            
            Metered metered = new Metered();
            metered.SetMeteredKey(publicKey, privateKey);
            
            decimal mbProcessed = Metered.GetConsumptionQuantity();
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Metered.GetConsumptionCredit">
      <summary>
            Retrieves count of credits consumed. 
            </summary>
      <returns>A decimal value that represents the consumption credit.</returns>
      <example>
        <para>
            Following example demonstrates how to retrieve count of credits consumed. 
            </para>
        <code lang="c#">
            string publicKey = "Public Key";
            string privateKey = "Private Key";
            
            Metered metered = new Metered();
            metered.SetMeteredKey(publicKey, privateKey);
            
            decimal creditsConsumed = Metered.GetConsumptionCredit();
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Parser.NamespaceDoc">
      <summary>
            The namespace provides classes for parsing data from documents. 
            With the main class <see cref="T:GroupDocs.Parser.Parser" /> you may use all document data parsing and extraction features.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Parser">
      <summary>
            Represents the main class that controls text, images, container extraction and parsing functionality.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.Data.Common.DbConnection)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class to extract data from a database.
            </summary>
      <param name="connection">The database connection.</param>
      <example>
        <para>The following example shows how to extract data from Sqlite database:</para>
        <code lang="c#">
            // Create DbConnection object
            DbConnection connection = new SQLiteConnection(string.Format("Data Source={0};Version=3;", Constants.SampleDatabase));
            // Create an instance of Parser class to extract tables from the database
            using (Parser parser = new Parser(connection))
            {
                // Check if text extraction is supported
                if (!parser.Features.Text)
                {
                    Console.WriteLine("Text extraction isn't supported.");
                    return;
                }
                // Check if toc extraction is supported
                if (!parser.Features.Toc)
                {
                    Console.WriteLine("Toc extraction isn't supported.");
                    return;
                }
                // Get a list of tables
                IEnumerable&lt;TocItem&gt; toc = parser.GetToc();
                // Iterate over tables
                foreach (TocItem i in toc)
                {
                    // Print the table name
                    Console.WriteLine(i.Text);
                    // Extract a table content as a text
                    using (TextReader reader = parser.GetText(i.PageIndex.Value))
                    {
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+data+from+databases">Extract data from databases</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.Data.Common.DbConnection,GroupDocs.Parser.Options.ParserSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class to extract data from a database.
            </summary>
      <param name="connection">The database connection.</param>
      <param name="parserSettings">The parser settings which are used to customize data extraction.</param>
      <example>
        <para>The following example shows how to extract data from Sqlite database:</para>
        <code lang="c#">
            // Create DbConnection object
            DbConnection connection = new SQLiteConnection(string.Format("Data Source={0};Version=3;", Constants.SampleDatabase));
            // Create an instance of Parser class to extract tables from the database
            using (Parser parser = new Parser(connection))
            {
                // Check if text extraction is supported
                if (!parser.Features.Text)
                {
                    Console.WriteLine("Text extraction isn't supported.");
                    return;
                }
                // Check if toc extraction is supported
                if (!parser.Features.Toc)
                {
                    Console.WriteLine("Toc extraction isn't supported.");
                    return;
                }
                // Get a list of tables
                IEnumerable&lt;TocItem&gt; toc = parser.GetToc();
                // Iterate over tables
                foreach (TocItem i in toc)
                {
                    // Print the table name
                    Console.WriteLine(i.Text);
                    // Extract a table content as a text
                    using (TextReader reader = parser.GetText(i.PageIndex.Value))
                    {
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+data+from+databases">Extract data from databases</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Logging">Logging</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(GroupDocs.Parser.Options.EmailConnection)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class to extract data from a remote email server.
            </summary>
      <param name="connection">The email connection.</param>
      <example>
        <para>The following example shows how to extract emails from Exchange Server:</para>
        <code lang="c#">
            // Create the connection object for Exchange Web Services protocol 
            EmailConnection connection = new EmailEwsConnection(
                "https://outlook.office365.com/ews/exchange.asmx",
                "email@server",
                "password");
             
            // Create an instance of Parser class to extract emails from the remote server
            using (Parser parser = new Parser(connection))
            {
                // Check if container extraction is supported
                if (!parser.Features.Container)
                {
                    Console.WriteLine("Container extraction isn't supported.");
                    return;
                }
            
            // Extract email messages from the server
            IEnumerable&lt;ContainerItem&gt; emails = parser.GetContainer();
             
                // Iterate over attachments
                foreach (ContainerItem item in emails)
                {
                    // Create an instance of Parser class for email message
                    using (Parser emailParser = item.OpenParser())
                    {
                        // Extract the email text
                        using (TextReader reader = emailParser.GetText())
                        {
                            // Print the email text
                            Console.WriteLine(reader == null ? "Text extraction isn't supported." : reader.ReadToEnd());
                        }
                    }
                }
            }   
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+emails+from+remote+server+via+POP%2C+IMAP+or+Exchange+Web+Services+protocols">Extract emails from remote server via POP, IMAP or Exchange Web Services protocols</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(GroupDocs.Parser.Options.EmailConnection,GroupDocs.Parser.Options.ParserSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class to extract data from a remote email server.
            </summary>
      <param name="connection">The email connection.</param>
      <param name="parserSettings">The parser settings which are used to customize data extraction.</param>
      <example>
        <para>The following example shows how to extract emails from Exchange Server:</para>
        <code lang="c#">
            // Create the connection object for Exchange Web Services protocol 
            EmailConnection connection = new EmailEwsConnection(
                "https://outlook.office365.com/ews/exchange.asmx",
                "email@server",
                "password");
             
            // Create an instance of Parser class to extract emails from the remote server
            using (Parser parser = new Parser(connection))
            {
                // Check if container extraction is supported
                if (!parser.Features.Container)
                {
                    Console.WriteLine("Container extraction isn't supported.");
                    return;
                }
            
            // Extract email messages from the server
            IEnumerable&lt;ContainerItem&gt; emails = parser.GetContainer();
             
                // Iterate over attachments
                foreach (ContainerItem item in emails)
                {
                    // Create an instance of Parser class for email message
                    using (Parser emailParser = item.OpenParser())
                    {
                        // Extract the email text
                        using (TextReader reader = emailParser.GetText())
                        {
                            // Print the email text
                            Console.WriteLine(reader == null ? "Text extraction isn't supported." : reader.ReadToEnd());
                        }
                    }
                }
            }   
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+emails+from+remote+server+via+POP%2C+IMAP+or+Exchange+Web+Services+protocols">Extract emails from remote server via POP, IMAP or Exchange Web Services protocols</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Logging">Logging</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class.
            </summary>
      <param name="filePath">The path to the file.</param>
      <example>
        <para>The following example shows how to load the document from the local disk:</para>
        <code lang="c#">
            // Create an instance of Parser class with the filePath
            using (Parser parser = new Parser(filePath))
            {
                // Extract a text into the reader
                using (TextReader reader = parser.GetText())
                {
                    // Print a text from the document
                    // If text extraction isn't supported, a reader is null
                    Console.WriteLine(reader == null ? "Text extraction isn't supported" : reader.ReadToEnd());
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Load+document+from+local+disk">Load document from local disk</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.String,GroupDocs.Parser.Options.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class with <see cref="T:GroupDocs.Parser.Options.LoadOptions" />.
            </summary>
      <param name="filePath">The path to the file.</param>
      <param name="loadOptions">The options to open the file.</param>
      <example>
        <para>The document password is passed by LoadOptions class:</para>
        <code lang="c#">
            try
            {
                // Create an instance of Parser class with the password:
                using (Parser parser = new Parser(filePath, new LoadOptions(password)))
                {
                    // Check if text extraction is supported
                    if (!parser.Features.Text)
                    {
                        Console.WriteLine("Text extraction isn't supported.");
                        return;
                    }
                    // Print the document text
                    using (TextReader reader = parser.GetText())
                    {
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            catch (InvalidPasswordException)
            {
                // Print the message if the password is incorrect or empty
                Console.WriteLine("Invalid password");
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Loading+specific+file+formats">Loading specific file formats</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Password-protected+documents">Loading password-protected documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Load+document+from+local+disk">Load document from local disk</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.String,GroupDocs.Parser.Options.LoadOptions,GroupDocs.Parser.Options.ParserSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class with <see cref="T:GroupDocs.Parser.Options.LoadOptions" />
            and <see cref="T:GroupDocs.Parser.Options.ParserSettings" />.
            </summary>
      <param name="filePath">The path to the file.</param>
      <param name="loadOptions">The options to open the file.</param>
      <param name="parserSettings">The parser settings which are used to customize data extraction.</param>
      <example>
        <para>The following example shows how to receive the information via <see cref="T:GroupDocs.Parser.Options.ILogger" /> interface:</para>
        <code lang="c#">
            // try
            {
                // Create an instance of Logger class
                Logger logger = new Logger();
                // Create an instance of Parser class with the parser settings
                using (Parser parser = new Parser(filePath, null, new ParserSettings(logger)))
                {
                    // Check if text extraction is supported
                    if (!parser.Features.Text)
                    {
                        Console.WriteLine("Text extraction isn't supported.");
                        return;
                    }
                    // Print the document text
                    using (TextReader reader = parser.GetText())
                    {
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            catch (InvalidPasswordException)
            {
                ; // Ignore the exception
            }
             
            private class Logger : ILogger
            {
                public void Error(string message, Exception exception)
                {
                    // Print error message
                    Console.WriteLine("Error: " + message);
                }
                public void Trace(string message)
                {
                    // Print event message
                    Console.WriteLine("Event: " + message);
                }
                public void Warning(string message)
                {
                    // Print warning message
                    Console.WriteLine("Warning: " + message);
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Loading+specific+file+formats">Loading specific file formats</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Password-protected+documents">Loading password-protected documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Logging">Logging</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Load+document+from+local+disk">Load document from local disk</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class.
            </summary>
      <param name="document">The source input stream.</param>
      <example>
        <para>The following example shows how to load the document from the stream:</para>
        <code lang="c#">
            // Create an instance of Parser class with the stream
            using (Parser parser = new Parser(stream))
            {
                // Extract a text into the reader
                using (TextReader reader = parser.GetText())
                {
                    // Print a text from the document
                    // If text extraction isn't supported, a reader is null
                    Console.WriteLine(reader == null ? "Text extraction isn't supported" : reader.ReadToEnd());
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Load+document+from+stream">Load document from stream</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.IO.Stream,GroupDocs.Parser.Options.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class with <see cref="T:GroupDocs.Parser.Options.LoadOptions" />.
            </summary>
      <param name="document">The source input stream.</param>
      <param name="loadOptions">The options to open the file.</param>
      <example>
        <para>
            In some cases it's necessary to define <see cref="T:GroupDocs.Parser.Options.FileFormat" />. 
            Both for special cases (databases, email server) and for detecting file types by the content:</para>
        <code lang="c#">
            // Create an instance of Parser class for markdown document
            using (Parser parser = new Parser(stream, new LoadOptions(FileFormat.Markup)))
            {
                // Check if text extraction is supported
                if (!parser.Features.Text)
                {
                    Console.WriteLine("Text extraction isn't supported.");
                    return;
                }
                using (TextReader reader = parser.GetText())
                {
                    // Print the document text
                    // Markdown is detected; text without special symbols is printed
                    Console.WriteLine(reader.ReadToEnd());
                }
            }
            </code>
        <para>The document password is passed by <see cref="T:GroupDocs.Parser.Options.LoadOptions" /> class:</para>
        <code lang="c#">
            try
            {
                // Create an instance of Parser class with the password:
                using (Parser parser = new Parser(filePath, new LoadOptions(password)))
                {
                    // Check if text extraction is supported
                    if (!parser.Features.Text)
                    {
                        Console.WriteLine("Text extraction isn't supported.");
                        return;
                    }
                    // Print the document text
                    using (TextReader reader = parser.GetText())
                    {
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            catch (InvalidPasswordException)
            {
                // Print the message if the password is incorrect or empty
                Console.WriteLine("Invalid password");
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Loading+specific+file+formats">Loading specific file formats</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Password-protected+documents">Loading password-protected documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Load+document+from+stream">Load document from stream</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.#ctor(System.IO.Stream,GroupDocs.Parser.Options.LoadOptions,GroupDocs.Parser.Options.ParserSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Parser" /> class with <see cref="T:GroupDocs.Parser.Options.LoadOptions" />
            and <see cref="T:GroupDocs.Parser.Options.ParserSettings" />.
            </summary>
      <param name="document">The source input stream.</param>
      <param name="loadOptions">The options to open the file.</param>
      <param name="parserSettings">The parser settings which are used to customize data extraction.</param>
      <example>
        <para>The following example shows how to receive the information via <see cref="T:GroupDocs.Parser.Options.ILogger" /> interface:</para>
        <code lang="c#">
            // try
            {
                // Create an instance of Logger class
                Logger logger = new Logger();
                // Create an instance of Parser class with the parser settings
                using (Parser parser = new Parser(stream, null, new ParserSettings(logger)))
                {
                    // Check if text extraction is supported
                    if (!parser.Features.Text)
                    {
                        Console.WriteLine("Text extraction isn't supported.");
                        return;
                    }
                    // Print the document text
                    using (TextReader reader = parser.GetText())
                    {
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            catch (InvalidPasswordException)
            {
                ; // Ignore the exception
            }
             
            private class Logger : ILogger
            {
                public void Error(string message, Exception exception)
                {
                    // Print error message
                    Console.WriteLine("Error: " + message);
                }
                public void Trace(string message)
                {
                    // Print event message
                    Console.WriteLine("Event: " + message);
                }
                public void Warning(string message)
                {
                    // Print warning message
                    Console.WriteLine("Warning: " + message);
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Loading+specific+file+formats">Loading specific file formats</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Password-protected+documents">Loading password-protected documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Load+document+from+stream">Load document from stream</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Logging">Logging</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.Finalize">
      <summary>
            Ensures that resources are freed and other cleanup operations are performed when
             the garbage collector reclaims the <see cref="T:GroupDocs.Parser.Parser" />.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetFileInfo(System.String)">
      <summary>
            Returns the general information about a file.
            </summary>
      <param name="filePath">The path to the file.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Options.FileInfo" /> class.</returns>
      <example>
        <para>The following code shows how to check whether a file is password-protected:</para>
        <code lang="c#">
            // Get a file info
            Options.FileInfo info = Parser.GetFileInfo(filePath);
            // Check IsEncrypted property
            Console.WriteLine(info.IsEncrypted ? "Password is required" : "");
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetFileInfo(System.String,GroupDocs.Parser.Options.LoadOptions)">
      <summary>
            Returns the general information about a file.
            </summary>
      <param name="filePath">The path to the file.</param>
      <param name="loadOptions">The options to open the file.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Options.FileInfo" /> class.</returns>
      <example>
        <para>The following code shows how to check a file type of the password-protected document:</para>
        <code lang="c#">
            // Get a file info
            Options.FileInfo info = Parser.GetFileInfo(filePath, new LoadOptions("password"));
            // Check IsEncrypted property
            Console.WriteLine(info.IsEncrypted ? "Password is required" : "");
            // Print the file type
            Console.WriteLine(info.FileType.ToString());
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetFileInfo(System.IO.Stream)">
      <summary>
            Returns the general information about a file.
            </summary>
      <param name="document">The source input stream.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Options.FileInfo" /> class.</returns>
      <example>
        <para>The following code shows how to check whether a file is password-protected:</para>
        <code lang="c#">
            // Get a file info
            Options.FileInfo info = Parser.GetFileInfo(document);
            // Check IsEncrypted property
            Console.WriteLine(info.IsEncrypted ? "Password is required" : "");
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetFileInfo(System.IO.Stream,GroupDocs.Parser.Options.LoadOptions)">
      <summary>
            Returns the general information about a file.
            </summary>
      <param name="document">The source input stream.</param>
      <param name="loadOptions">The options to open the file.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Options.FileInfo" /> class.</returns>
      <example>
        <para>The following code shows how to check a file type of the password-protected document:</para>
        <code lang="c#">
            // Get a file info
            Options.FileInfo info = Parser.GetFileInfo(document);
            // Check IsEncrypted property
            Console.WriteLine(info.IsEncrypted ? "Password is required" : "");
            // Print the file type
            Console.WriteLine(info.FileType.ToString());
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GeneratePreview(GroupDocs.Parser.Options.PreviewOptions)">
      <summary>
            Get pages preview.
            </summary>
      <param name="previewOptions">The options to sets requirements and stream delegates for preview generation.</param>
      <exception cref="T:System.NotSupportedException">Preview generation isn't supported for this document type.</exception>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetDocumentInfo">
      <summary>
            Returns the general information about the document.
            </summary>
      <returns>An instance of class that implements <see cref="T:GroupDocs.Parser.Options.IDocumentInfo" /> interface.</returns>
      <example>
        <para>The following example shows how to get document info:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Get the document info
                IDocumentInfo info = parser.GetDocumentInfo();
            
                Console.WriteLine(string.Format("FileType: {0}", info.FileType));
                Console.WriteLine(string.Format("PageCount: {0}", info.PageCount));
                Console.WriteLine(string.Format("Size: {0}", info.Size));
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+document+info">Get document info</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Detect+encoding">Detect encoding</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetText">
      <summary>
            Extracts a text from the document.
            </summary>
      <returns>
            An instance of <see cref="T:System.IO.TextReader" /> class with the extracted text;
            <c>null</c> if text extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract a text from a document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Extract a text into the reader
                using(TextReader reader = parser.GetText())
                {
                    // Print a text from the document
                    // If text extraction isn't supported, a reader is null
                    Console.WriteLine(reader == null ? "Text extraction isn't supported" : reader.ReadToEnd());
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+from+documents">Extract text from documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Accurate+mode">Extract text in Accurate mode</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetText(GroupDocs.Parser.Options.TextOptions)">
      <summary>
            Extracts a text page from the document using text options (to enable raw fast text extraction mode).
            </summary>
      <param name="options">The text extraction options.</param>
      <returns>
            An instance of <see cref="T:System.IO.TextReader" /> class with the extracted text;
            <c>null</c> if text extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract a raw text from a document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Extract a raw text into the reader
                using(TextReader reader = parser.GetText(new TextOptions(true)))
                {
                    // Print a text from the document
                    // If text extraction isn't supported, a reader is null
                    Console.WriteLine(reader == null ? "Text extraction isn't supported" : reader.ReadToEnd());
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Accurate+mode">Extract text in Accurate mode</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Raw+mode">Extract text in Raw mode</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetText(System.Int32)">
      <summary>
            Extracts a text from the document page.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <returns>
            An instance of <see cref="T:System.IO.TextReader" /> class with the extracted text;
            <c>null</c> if text page extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract a text from the document page:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Check if the document supports text extraction
                if(!parser.Features.Text)
                {
                    Console.WriteLine("Document isn't supports text extraction.");
                    return;
                }
            
                // Get the document info
                IDocumentInfo documentInfo = parser.GetDocumentInfo();
                // Check if the document has pages
                if(documentInfo.PageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
             
                // Iterate over pages
                for(int p = 0; p&lt;documentInfo.PageCount; p++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", p + 1, documentInfo.PageCount));
             
                    // Extract a text into the reader
                    using(TextReader reader = parser.GetText(p))
                    {
                        // Print a text from the document
                        // We ignore null-checking as we have checked text extraction feature support earlier
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Accurate+mode">Extract text in Accurate mode</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetText(System.Int32,GroupDocs.Parser.Options.TextOptions)">
      <summary>
            Extracts a text from the document page using text options (to enable raw fast text extraction mode).
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <param name="options">The text extraction options.</param>
      <returns>
            An instance of <see cref="T:System.IO.TextReader" /> class with the extracted text;
            <c>null</c> if text page extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract a raw text from the document page:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Check if the document supports text extraction
                if(!parser.Features.Text)
                {
                    Console.WriteLine("Document isn't supports text extraction.");
                    return;
                }
            
                // Get the document info
                DocumentInfo documentInfo = parser.GetDocumentInfo() as DocumentInfo;
                // Check if the document has pages
                if(documentInfo == null || documentInfo.RawPageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
             
                // Iterate over pages
                for(int p = 0; p&lt;documentInfo.RawPageCount; p++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", p + 1, documentInfo.RawPageCount));
             
                    // Extract a text into the reader
                    using(TextReader reader = parser.GetText(p, new TextOptions(true)))
                    {
                        // Print a text from the document
                        // We ignore null-checking as we have checked text extraction feature support earlier
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Accurate+mode">Extract text in Accurate mode</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Raw+mode">Extract text in Raw mode</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetFormattedText(GroupDocs.Parser.Options.FormattedTextOptions)">
      <summary>
            Extracts a formatted text from the document.
            </summary>
      <param name="options">The formatted text extraction options.</param>
      <returns>
            An instance of <see cref="T:System.IO.TextReader" /> class with the extracted text;
            <c>null</c> if formatted text extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract a document text as HTML text:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract a formatted text into the reader
                using (TextReader reader = parser.GetFormattedText(new FormattedTextOptions(FormattedTextMode.Html)))
                {
                    // Print a formatted text from the document
                    // If formatted text extraction isn't supported, a reader is null
                    Console.WriteLine(reader == null ? "Formatted text extraction isn't suppported" : reader.ReadToEnd());
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+formatted+text+from+document">Extract formatted text from document</a>
          </item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/HTML">HTML</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Markdown">Markdown</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Plain+text">Plain text</a></item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetFormattedText(System.Int32,GroupDocs.Parser.Options.FormattedTextOptions)">
      <summary>
            Extracts a formatted text from the document page.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <param name="options">The formatted text extraction options.</param>
      <returns>
            An instance of <see cref="T:System.IO.TextReader" /> class with the extracted text; 
            <c>null</c> if formatted text page extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract a document page text as Markdown text:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports formatted text extraction
                if (!parser.Features.FormattedText)
                {
                    Console.WriteLine("Document isn't supports formatted text extraction.");
                    return;
                }
                
                // Get the document info
                IDocumentInfo documentInfo = parser.GetDocumentInfo();
                // Check if the document has pages
                if (documentInfo.PageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
                
                // Iterate over pages
                for (int p = 0; p&lt;documentInfo.PageCount; p++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", p + 1, documentInfo.PageCount));
                    // Extract a formatted text into the reader
                    using (TextReader reader = parser.GetFormattedText(p, new FormattedTextOptions(FormattedTextMode.Markdown)))
                    {
                        // Print a formatted text from the document
                        // We ignore null-checking as we have checked formatted text extraction feature support earlier
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+formatted+text+from+document+page">Extract formatted text from document page</a>
          </item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/HTML">HTML</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Markdown">Markdown</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Plain+text">Plain text</a></item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.Search(System.String)">
      <summary>
            Searches a <paramref name="keyword" /> in the document.
            </summary>
      <param name="keyword">The keyword to search.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.SearchResult" /> objects; 
            <c>null</c> if search isn't supported.
            </returns>
      <example>
        <para>The following example shows how to find a keyword in a document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Search a keyword:
                IEnumerable&lt;SearchResult&gt; sr = parser.Search("page number");
                // Check if search is supported
                if(sr == null)
                {
                    Console.WriteLine("Search isn't supported");
                    return;
                }
             
                // Iterate over search results
                foreach(SearchResult s in sr)
                {
                    // Print an index and found text:
                    Console.WriteLine(string.Format("At {0}: {1}", s.Position, s.Text));
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text">Search text</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+Word+documents">Search text in Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+Excel+spreadsheets">Search text in Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+PowerPoint+presentations">Search text in Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+PDF+documents">Search text in PDF documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Emails">Search text in Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+EPUB+eBooks">Search text in EPUB eBooks</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+HTML+documents">Search text in HTML documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+OneNote+sections">Search text in Microsoft OneNote sections</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.Search(System.String,GroupDocs.Parser.Options.SearchOptions)">
      <summary>
            Searches a <paramref name="keyword" /> in the document using search options (regular expression, match case, etc.).
            </summary>
      <param name="keyword">The keyword to search.</param>
      <param name="options">The search options.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.SearchResult" /> objects;
            <c>null</c> if search isn't supported.
            </returns>
      <example>
        <para>The following example shows how to search with a regular expression in a document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Search with a regular expression with case matching
                IEnumerable&lt;SearchResult&gt; sr = parser.Search("page number: [0-9]+", new SearchOptions(true, false, true));
                // Check if search is supported
                if(sr == null)
                {
                    Console.WriteLine("Search isn't supported");
                    return;
                }
             
                // Iterate over search results
                foreach(SearchResult s in sr)
                {
                    // Print an index and found text:
                    Console.WriteLine(string.Format("At {0}: {1}", s.Position, s.Text));
                }
            }
            </code>
        <para>The following example shows how to search a text on pages:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Search a keyword with page numbers
                IEnumerable&lt;SearchResult&gt; sr = parser.Search("line", new SearchOptions(false, false, false, true));
                // Check if search is supported
                if(sr == null)
                {
                    Console.WriteLine("Search isn't supported");
                    return;
                }
             
                // Iterate over search results
                foreach(SearchResult s in sr)
                {
                    // Print an index, page number and found text:
                    Console.WriteLine(string.Format("At {0} (page {1}): {2}", s.Position, s.PageIndex, s.Text));
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text">Search text</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+Word+documents">Search text in Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+Excel+spreadsheets">Search text in Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+PowerPoint+presentations">Search text in Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+PDF+documents">Search text in PDF documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Emails">Search text in Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+EPUB+eBooks">Search text in EPUB eBooks</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+HTML+documents">Search text in HTML documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+OneNote+sections">Search text in Microsoft OneNote sections</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetHighlight(System.Int32,System.Boolean,GroupDocs.Parser.Options.HighlightOptions)">
      <summary>
            Extracts a highlight from the document.
            </summary>
      <param name="position">The start position of the highlight.</param>
      <param name="isDirect">
            The value that indicates whether highlight extraction is direct.
            <c>true</c> if the higlight is extracted by the right of <paramref name="position" />; otherwise, <c>false</c>.
            </param>
      <param name="options">The highlight extraction options.</param>
      <returns>
            An instance of <see cref="T:GroupDocs.Parser.Data.HighlightItem" /> class that represents the extracted highlight;
            <c>null</c> if highlight extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract a highlight that contains 3 words:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract a highlight:
                HighlightItem hl = parser.GetHighlight(2, true, new HighlightOptions(3));
                
                // Check if highlight extraction is supported
                if (hl == null)
                {
                    Console.WriteLine("Highlight extraction isn't supported");
                    return;
                }
                
                // Print an extracted highlight
                Console.WriteLine(string.Format("At {0}: {1}", hl.Position, hl.Text));
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+highlights">Extract highlights</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetStructure">
      <summary>
            Extracts a structured text from the document.
            </summary>
      <returns>
            An instance of <see cref="T:System.Xml.XmlReader" /> class with XML text structure;
            <c>null</c> if text structure extraction isn't supported.
            </returns>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+structure">Extract text structure</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetToc">
      <summary>
            Extracts a table of contents from the document.
            </summary>
      <returns>
            A collection of table of contents items;
            <c>null</c> if table of contents extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract table of contents from CHM file:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if text extraction is supported
                if (!parser.Features.Text)
                {
                    Console.WriteLine("Text extraction isn't supported.");
                    return;
                }
            
                // Check if toc extraction is supported
                if (!parser.Features.Toc)
                {
                    Console.WriteLine("Toc extraction isn't supported.");
                    return;
                }
             
                // Get table of contents
                IEnumerable&lt;TocItem&gt; toc = parser.GetToc();
                
                // Iterate over items
                foreach (TocItem i in toc)
                {
                    // Print the Toc text
                    Console.WriteLine(i.Text);
                    // Check if page index has a value
                    if (i.PageIndex == null)
                    {
                        continue;
                    }
                    // Extract a page text
                    using (TextReader reader = parser.GetText(i.PageIndex.Value))
                    {
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+table+of+contents">Extract table of contents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+by+table+of+contents+item">Extract text by table of contents item</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+table+of+contents+from+Microsoft+Office+Word+documents">Extract table of contents from Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+table+of+contents+from+EPUB+eBooks">Extract table of contents from EPUB eBooks</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetContainer">
      <summary>
            Extracts a container object from the document to work with formats that contain attachments, ZIP archives etc.
            </summary>
      <returns>
            A collection of container items;
            <c>null</c> if container extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract attachments from a container:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Extract attachments from the container
                IEnumerable&lt;ContainerItem&gt; attachments = parser.GetContainer();
                // Check if container extraction is supported
                if(attachments == null)
                {
                    Console.WriteLine("Container extraction isn't supported");
                }
             
                // Iterate over attachments
                foreach(ContainerItem item in attachments)
                {
                    // Print an item name and size
                    Console.WriteLine(string.Format("{0}: {1}", item.Name, item.Size));
                }
            }
            </code>
      </example>
      <remarks>
        <para>To check if the format supports extracting attachments see <a target="_blank" href="https://docs.groupdocs.com/parser/net/supported-document-formats/">Supported Document Formats</a> (<b>Extract Containers and Attachments</b> column).</para>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+data+from+attachments+and+ZIP+archives">Extract data from attachments and ZIP archives</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Iterate+through+container+items">Iterate through container items</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+attachments+from+PDF+portfolios">Extract attachments from PDF portfolios</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+attachments+from+Emails">Extract attachments from Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+emails+from+Outlook+Storage">Extract emails from Outlook Storage</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+from+ZIP+archive+files">Extract text from ZIP archive files</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetMetadata">
      <summary>
            Extracts metadata from the document.
            </summary>
      <returns>
            A collection of metadata items;
            <c>null</c> if metadata extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract metadata from a document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Extract metadata from the document
                IEnumerable&lt;MetadataItem&gt; metadata = parser.GetMetadata();
                // Check if metadata extraction is supported
                if(metadata == null)
                {
                    Console.WriteLine("Metatada extraction isn't supported");
                }
             
                // Iterate over metadata items
                foreach(MetadataItem item in metadata)
                {
                    // Print an item name and value
                    Console.WriteLine(string.Format("{0}: {1}", item.Name, item.Value));
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+metadata+from+documents">Extract metadata from documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+metadata+from+Microsoft+Office+Word+documents">Extract metadata from Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+metadata+from+Microsoft+Office+Excel+spreadsheets">Extract metadata from Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+metadata+from+Microsoft+Office+PowerPoint+presentations">Extract metadata from Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+metadata+from+PDF+documents">Extract metadata from PDF documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+metadata+from+Emails">Extract metadata from Emails</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetTextAreas">
      <summary>
            Extracts text areas from the document.
            </summary>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> objects;
            <c>null</c> if text areas extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract all text areas from the whole document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Extract text areas
                IEnumerable&lt;PageTextArea&gt; areas = parser.GetTextAreas();
                // Check if text areas extraction is supported
                if(areas == null)
                {
                    Console.WriteLine("Page text areas extraction isn't supported");
                    return;
                }
             
                // Iterate over page text areas
                foreach(PageTextArea a in areas)
                {
                    // Print a page index, rectangle and text area value:
                    Console.WriteLine(string.Format("Page: {0}, R: {1}, Text: {2}", a.Page.Index, a.Rectangle, a.Text));
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+areas">Extract text areas</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetTextAreas(GroupDocs.Parser.Options.PageTextAreaOptions)">
      <summary>
            Extracts text areas from the document using customization options (regular expression, match case, etc.).
            </summary>
      <param name="options">The options for text area extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> objects;
            <c>null</c> if text areas extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract only text areas with digits from the upper-left courner:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Create the options which are used for text area extraction
                PageTextAreaOptions options = new PageTextAreaOptions("[0-9]+", new Rectangle(new Point(0, 0), new Size(300, 100)));
            
                // Extract text areas which contain only digits from the upper-left courner of a page:
                IEnumerable&lt;PageTextArea&gt; areas = parser.GetTextAreas(options);
                // Check if text areas extraction is supported
                if(areas == null)
                {
                    Console.WriteLine("Page text areas extraction isn't supported");
                    return;
                }
             
                // Iterate over page text areas
                foreach(PageTextArea a in areas)
                {
                    // Print a page index, rectangle and text area value:
                    Console.WriteLine(string.Format("Page: {0}, R: {1}, Text: {2}", a.Page.Index, a.Rectangle, a.Text));
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+areas">Extract text areas</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetTextAreas(System.Int32)">
      <summary>
            Extracts text areas from the document page.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> objects;
            <c>null</c> if text areas extraction isn't supported.
            </returns>
      <example>
        <para>To extract text areas from a document page the following method is used:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using(Parser parser = new Parser(filePath))
            {
                // Check if the document supports text areas extraction
                if(!parser.Features.TextAreas)
                {
                    Console.WriteLine("Document isn't supports text areas extraction.");
                    return;
                }
            
                // Get the document info
                IDocumentInfo documentInfo = parser.GetDocumentInfo();
                // Check if the document has pages
                if(documentInfo.PageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
             
                // Iterate over pages
                for(int pageIndex = 0; pageIndex&lt;documentInfo.PageCount; pageIndex++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", pageIndex + 1, documentInfo.PageCount));
             
                    // Iterate over page text areas
                    // We ignore null-checking as we have checked text areas extraction feature support earlier
                    foreach(PageTextArea a in parser.GetTextAreas(pageIndex))
                    {
                        // Print a rectangle and text area value:
                        Console.WriteLine(string.Format("R: {0}, Text: {1}", a.Rectangle, a.Text));
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+areas">Extract text areas</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetTextAreas(System.Int32,GroupDocs.Parser.Options.PageTextAreaOptions)">
      <summary>
            Extracts text areas from the document page using customization options (regular expression, match case, etc.).
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <param name="options">The options for text area extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> objects;
            <c>null</c> if text areas extraction isn't supported.
            </returns>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+areas">Extract text areas</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetImages">
      <summary>
            Extracts images from the document.
            </summary>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageImageArea" /> objects;
            <c>null</c> if images extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract all images from the whole document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract images
                IEnumerable&lt;PageImageArea&gt; images = parser.GetImages();
                // Check if images extraction is supported
                if (images == null)
                {
                    Console.WriteLine("Images extraction isn't supported");
                    return;
                }
                // Iterate over images
                foreach (PageImageArea image in images)
                {
                    // Print a page index, rectangle and image type:
                    Console.WriteLine(string.Format("Page: {0}, R: {1}, Type: {2}", image.Page.Index, image.Rectangle, image.FileType));
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+documents">Extract images from documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+to+files">Extract images to files</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Word+documents">Extract images from Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Excel+spreadsheets">Extract images from Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+PowerPoint+presentations">Extract images from Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Emails">Extract images from Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+PDF+documents">Extract images from PDF documents</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetImages(GroupDocs.Parser.Options.PageAreaOptions)">
      <summary>
            Extracts images from the document using customization options 
            (to set the rectangular area that contains images).
            </summary>
      <param name="options">The options for images extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageImageArea" /> objects;
            <c>null</c> if images extraction isn't supported.
            </returns>
      <example>
        <para>The following example shows how to extract only images from the upper-left courner:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Create the options which are used for images extraction
                PageAreaOptions options = new PageAreaOptions(new Rectangle(new Point(0, 0), new Size(300, 100)));
                // Extract images from the upper-left courner of a page:
                IEnumerable&lt;PageImageArea&gt; images = parser.GetImages(options);
                // Check if images extraction is supported
                if (images == null)
                {
                    Console.WriteLine("Page images extraction isn't supported");
                    return;
                }
                // Iterate over images
                foreach (PageImageArea image in images)
                {
                    // Print a page index, rectangle and image type:
                    Console.WriteLine(string.Format("Page: {0}, R: {1}, Type: {2}", image.Page.Index, image.Rectangle, image.FileType));
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+documents">Extract images from documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+to+files">Extract images to files</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+document+page+area">Extract images from document page area</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Word+documents">Extract images from Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Excel+spreadsheets">Extract images from Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+PowerPoint+presentations">Extract images from Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Emails">Extract images from Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+PDF+documents">Extract images from PDF documents</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetImages(System.Int32)">
      <summary>
            Extracts images from the document page.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageImageArea" /> objects;
            <c>null</c> if images extraction isn't supported.
            </returns>
      <example>
        <para>To extract images from a document page the following method is used:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports images extraction
                if (!parser.Features.Images)
                {
                    Console.WriteLine("Document isn't supports images extraction.");
                    return;
                }
                
                // Get the document info
                IDocumentInfo documentInfo = parser.GetDocumentInfo();
                // Check if the document has pages
                if (documentInfo.PageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
                
                // Iterate over pages
                for (int pageIndex = 0; pageIndex&lt;documentInfo.PageCount; pageIndex++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", pageIndex + 1, documentInfo.PageCount));
                    // Iterate over images
                    // We ignore null-checking as we have checked images extraction feature support earlier
                    foreach (PageImageArea image in parser.GetImages(pageIndex))
                    {
                        // Print a rectangle and image type
                        Console.WriteLine(string.Format("R: {0}, Text: {1}", image.Rectangle, image.FileType));
                    }
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+documents">Extract images from documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+to+files">Extract images to files</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+document+page">Extract images from document page</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Word+documents">Extract images from Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Excel+spreadsheets">Extract images from Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+PowerPoint+presentations">Extract images from Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Emails">Extract images from Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+PDF+documents">Extract images from PDF documents</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetImages(System.Int32,GroupDocs.Parser.Options.PageAreaOptions)">
      <summary> 
            Extracts images from the document page using customization options 
            (to set the rectangular area that contains images).
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <param name="options">The options for images extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageImageArea" /> objects;
            <c>null</c> if images extraction isn't supported.
            </returns>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+documents">Extract images from documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+to+files">Extract images to files</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+document+page">Extract images from document page</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+document+page+area">Extract images from document page area</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Word+documents">Extract images from Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+Excel+spreadsheets">Extract images from Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Microsoft+Office+PowerPoint+presentations">Extract images from Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+Emails">Extract images from Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+PDF+documents">Extract images from PDF documents</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetHyperlinks">
      <summary> 
            Extracts hyperlinks from the document.
            </summary>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageHyperlinkArea" /> objects;
            <c>null</c> if hyperlinks extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract all hyperlinks from the whole document:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports hyperlink extraction
                if (!parser.Features.Hyperlinks)
                {
                    Console.WriteLine("Document isn't supports hyperlink extraction.");
                    return;
                }
                // Extract hyperlinks from the document
                IEnumerable&lt;PageHyperlinkArea&gt; hyperlinks = parser.GetHyperlinks();
                // Iterate over hyperlinks
                foreach (PageHyperlinkArea h in hyperlinks)
                {
                    // Print the hyperlink text
                    Console.WriteLine(h.Text);
                    // Print the hyperlink URL
                    Console.WriteLine(h.Url);
                    Console.WriteLine();
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetHyperlinks(System.Int32)">
      <summary> 
            Extracts hyperlinks from the document page.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageHyperlinkArea" /> objects;
            <c>null</c> if hyperlinks extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract hyperlinks from the document page:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports hyperlink extraction
                if (!parser.Features.Hyperlinks)
                {
                    Console.WriteLine("Document isn't supports hyperlink extraction.");
                    return;
                }
                // Get the document info
                IDocumentInfo documentInfo = parser.GetDocumentInfo();
                // Check if the document has pages
                if (documentInfo.PageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
                // Iterate over pages
                for (int pageIndex = 0; pageIndex &lt; documentInfo.PageCount; pageIndex++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", pageIndex + 1, documentInfo.PageCount));
                    // Extract hyperlinks from the document page
                    IEnumerable&lt;PageHyperlinkArea&gt; hyperlinks = parser.GetHyperlinks(pageIndex);
                    // Iterate over hyperlinks
                    foreach (PageHyperlinkArea h in hyperlinks)
                    {
                        // Print the hyperlink text
                        Console.WriteLine(h.Text);
                        // Print the hyperlink URL
                        Console.WriteLine(h.Url);
                        Console.WriteLine();
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetHyperlinks(GroupDocs.Parser.Options.PageAreaOptions)">
      <summary> 
            Extracts hyperlinks from the document using customization options 
            (to set the rectangular area that contains hyperlinks).
            </summary>
      <param name="options">The options for hyperlinks extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageHyperlinkArea" /> objects;
            <c>null</c> if hyperlinks extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract hyperlinks from the document page area:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports hyperlink extraction
                if (!parser.Features.Hyperlinks)
                {
                    Console.WriteLine("Document isn't supports hyperlink extraction.");
                    return;
                }
                // Create the options which are used for hyperlink extraction
                PageAreaOptions options = new PageAreaOptions(new Rectangle(new Point(380, 90), new Size(150, 50)));
                // Extract hyperlinks from the document page area
                IEnumerable&lt;PageHyperlinkArea&gt; hyperlinks = parser.GetHyperlinks(options);
                // Iterate over hyperlinks
                foreach (PageHyperlinkArea h in hyperlinks)
                {
                    // Print the hyperlink text
                    Console.WriteLine(h.Text);
                    // Print the hyperlink URL
                    Console.WriteLine(h.Url);
                    Console.WriteLine();
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetHyperlinks(System.Int32,GroupDocs.Parser.Options.PageAreaOptions)">
      <summary> 
            Extracts hyperlinks from the document page using customization options 
            (to set the rectangular area that contains hyperlinks).
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <param name="options">The options for hyperlinks extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageHyperlinkArea" /> objects;
            <c>null</c> if hyperlinks extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract hyperlinks from the document page area using customization options:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports hyperlink extraction
                if (!parser.Features.Hyperlinks)
                {
                    Console.WriteLine("Document isn't supports hyperlink extraction.");
                    return;
                }
                
                // Get the document info
                IDocumentInfo documentInfo = parser.GetDocumentInfo();
                // Check if the document has pages
                if (documentInfo.PageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
                
                // Create the options which are used for hyperlink extraction
                PageAreaOptions options = new PageAreaOptions(new Rectangle(new Point(380, 90), new Size(150, 50)));
                // Iterate over pages
                for (int pageIndex = 0; pageIndex &lt; documentInfo.PageCount; pageIndex++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", pageIndex + 1, documentInfo.PageCount));         
                    // Extract hyperlinks from the document page area
                    IEnumerable&lt;PageHyperlinkArea&gt; hyperlinks = parser.GetHyperlinks(pageIndex, options);
                    // Iterate over hyperlinks
                    foreach (PageHyperlinkArea h in hyperlinks)
                    {
                        // Print the hyperlink text
                        Console.WriteLine(h.Text);
                        // Print the hyperlink URL
                        Console.WriteLine(h.Url);
                        Console.WriteLine();
                    }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetBarcodes">
      <summary> 
            Extracts barcodes from the document.
            </summary>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageBarcodeArea" /> objects;
            <c>null</c> if barcodes extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract barcodes from a document:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract barcodes from the document.
                IEnumerable&lt;PageBarcodeArea&gt; barcodes = parser.GetBarcodes();
            
                // Iterate over barcodes
                foreach(PageBarcodeArea barcode in barcodes)
                {
                    // Print the page index
                    Console.WriteLine("Page: " + barcode.Page.Index.ToString());
                    // Print the barcode value
                    Console.WriteLine("Value: " + barcode.Value);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetBarcodes(System.Int32)">
      <summary> 
            Extracts barcodes from the document page.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageBarcodeArea" /> objects;
            <c>null</c> if barcodes extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract barcodes from a document page:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract barcodes from the second document page.
                IEnumerable&lt;PageBarcodeArea&gt; barcodes = parser.GetBarcodes(1);
            
                // Iterate over barcodes
                foreach(PageBarcodeArea barcode in barcodes)
                {
                    // Print the page index
                    Console.WriteLine("Page: " + barcode.Page.Index.ToString());
                    // Print the barcode value
                    Console.WriteLine("Value: " + barcode.Value);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetBarcodes(GroupDocs.Parser.Options.PageAreaOptions)">
      <summary> 
            Extracts barcodes from the document using customization options 
            (to set the rectangular area that contains barcodes).
            </summary>
      <param name="options">The options for barcodes extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageBarcodeArea" /> objects;
            <c>null</c> if barcodes extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract barcodes from the upper-right corner.
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Create the options which are used for barcodes extraction
                PageAreaOptions options = new PageAreaOptions(new Rectangle(new Point(590, 80), new Size(150, 150)));
                // Extract barcodes from the upper-right corner.
                IEnumerable&lt;PageBarcodeArea&gt; barcodes = parser.GetBarcodes(options);
            
                // Iterate over barcodes
                foreach (PageBarcodeArea barcode in barcodes)
                {
                    // Print the page index
                    Console.WriteLine("Page: " + barcode.Page.Index.ToString());
                    // Print the barcode value
                    Console.WriteLine("Value: " + barcode.Value);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetBarcodes(System.Int32,GroupDocs.Parser.Options.PageAreaOptions)">
      <summary> 
            Extracts barcodes from the document page using customization options 
            (to set the rectangular area that contains barcodes).
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <param name="options">The options for barcodes extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageBarcodeArea" /> objects;
            <c>null</c> if barcodes extraction isn't supported.
            </returns>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetTables(GroupDocs.Parser.Options.PageTableAreaOptions)">
      <summary> 
            Extracts tables from the document.
            </summary>
      <param name="options">The options for tables extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageTableArea" /> objects;
            <c>null</c> if tables extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract tables from the whole document:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports table extraction
                if (!parser.Features.Tables)
                {
                    Console.WriteLine("Document isn't supports tables extraction.");
                    return;
                }
                // Create the layout of tables
                TemplateTableLayout layout = new TemplateTableLayout(
                    new double[] { 50, 95, 275, 415, 485, 545 },
                    new double[] { 325, 340, 365, 395 });
                // Create the options for table extraction
                PageTableAreaOptions options = new PageTableAreaOptions(layout);
                // Extract tables from the document
                IEnumerable&lt;PageTableArea&gt; tables = parser.GetTables(options);
                // Iterate over tables
                foreach (PageTableArea t in tables)
                {
                    // Iterate over rows
                    for (int row = 0; row &lt; t.RowCount; row++)
                    {
                        // Iterate over columns
                        for (int column = 0; column &lt; t.ColumnCount; column++)
                        {
                            // Get the table cell
                            PageTableAreaCell cell = t[row, column];
                            if (cell != null)
                            {
                                // Print the table cell text
                                Console.Write(cell.Text);
                                Console.Write(" | ");
                            }
                        }
                        Console.WriteLine();
                    }
                    Console.WriteLine();
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.GetTables(System.Int32,GroupDocs.Parser.Options.PageTableAreaOptions)">
      <summary> 
            Extracts tables from the document page.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
      <param name="options">The options for tables extraction.</param>
      <returns>
            A collection of <see cref="T:GroupDocs.Parser.Data.PageTableArea" /> objects;
            <c>null</c> if tables extraction isn't supported.
            </returns>
      <example>
        <para>
            The following example shows how to extract tables from the document page:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Check if the document supports table extraction
                if (!parser.Features.Tables)
                {
                    Console.WriteLine("Document isn't supports tables extraction.");
                    return;
                }
                // Create the layout of tables
                TemplateTableLayout layout = new TemplateTableLayout(
                    new double[] { 50, 95, 275, 415, 485, 545 },
                    new double[] { 325, 340, 365, 395 });
                // Create the options for table extraction
                PageTableAreaOptions options = new PageTableAreaOptions(layout);
                // Get the document info
                IDocumentInfo documentInfo = parser.GetDocumentInfo();
                // Check if the document has pages
                if (documentInfo.PageCount == 0)
                {
                    Console.WriteLine("Document hasn't pages.");
                    return;
                }
                // Iterate over pages
                for (int pageIndex = 0; pageIndex &lt; documentInfo.PageCount; pageIndex++)
                {
                    // Print a page number 
                    Console.WriteLine(string.Format("Page {0}/{1}", pageIndex + 1, documentInfo.PageCount));
                    // Extract tables from the document page
                    IEnumerable&lt;PageTableArea&gt; tables = parser.GetTables(pageIndex, options);
                    // Iterate over tables
                    foreach (PageTableArea t in tables)
                    {
                        // Iterate over rows
                        for (int row = 0; row &lt; t.RowCount; row++)
                        {
                            // Iterate over columns
                            for (int column = 0; column &lt; t.ColumnCount; column++)
                            {
                                // Get the table cell
                                PageTableAreaCell cell = t[row, column];
                                if (cell != null)
                                {
                                    // Print the table cell text
                                    Console.Write(cell.Text);
                                    Console.Write(" | ");
                                }
                            }
                            Console.WriteLine();
                        }
                        Console.WriteLine();
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Parser.ParseByTemplate(GroupDocs.Parser.Templates.Template)">
      <summary>
            Parses the document by the user-generated template.
            </summary>
      <param name="template">The user-generated template.</param>
      <returns>
            An instance of <see cref="T:GroupDocs.Parser.Data.DocumentData" /> class that contains the extracted data;
            <c>null</c> if parsing by template isn't supported.
            </returns>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Parse+data+from+documents">Parse data from documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Working+with+templates">Working with templates</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Working+with+data+extracted+by+template">Working with data extracted by template</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Parse+data+from+PDF+documents">Parse data from PDF documents</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.ParseForm">
      <summary>
            Parses the document form.
            </summary>
      <returns>
            An instance of <see cref="T:GroupDocs.Parser.Data.DocumentData" /> class that contains the extracted data;
            <c>null</c> if parsing by template isn't supported.
            </returns>
      <example>
        <para>The following example shows how to parse a form of the document:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract data from PDF document
                DocumentData data = parser.ParseForm();
                // Iterate over extracted data
                for (int i = 0; i&lt;data.Count; i++)
                {
                    Console.Write(data[i].Name + ": ");
                    PageTextArea area = data[i].PageArea as PageTextArea;
                    Console.WriteLine(area == null ? "Not a template field" : area.Text);
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+data+from+PDF+forms">Extract data from PDF forms</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Working+with+data+extracted+by+template">Working with extracted data</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Parse+data+from+PDF+documents">Parse data from PDF documents</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Parser.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Parser.Features">
      <summary>
            Gets the supported features.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Options.Features" /> class that represents the supported features.</value>
      <example>
        <para>
            If the feature isn't supported, the method returns <c>null</c> instead of the value. 
            Some operations may consume significant time. So it's not optimal to call the method to just check the support for the feature. 
            For this purpose Features property is used:
            </para>
        <code lang="c#">
            using(Parser parser = new Parser("doc.zip"))
            {
                if(!parser.Features.Text)
                {
                    Console.WriteLine("Text extraction isn't supported");
                    return;
                }
             
                using(TextReader reader = parser.GetText())
                {
                    Console.WriteLine(reader.ReadToEnd());
                }
            }
            </code>
      </example>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+supported+features">Get supported features</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:GroupDocs.Parser.Templates.NamespaceDoc">
      <summary>
            The namespace provides classes for creating templates for parsing document data. 
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Templates.Template">
      <summary>
            Provides the document template. It consists of <see cref="T:GroupDocs.Parser.Templates.TemplateItem" /> objects
            which represent the items of the template such as text field and table definitions.
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Working+with+templates">Working with templates</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Templates.Template.#ctor(System.Collections.Generic.IEnumerable{GroupDocs.Parser.Templates.TemplateItem})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.Template" /> class.
            </summary>
      <param name="items">The collection of <see cref="T:GroupDocs.Parser.Templates.TemplateItem" /> objects.</param>
      <example>
        <para>Usage:</para>
        <code lang="c#">
            // Create an array of template fields
            TemplateItem[] fields = new TemplateItem[]
            {
               new TemplateField(new TemplateRegexPosition("From"), "From", 0),
               new TemplateField(
                   new TemplateLinkedPosition("From", new Size(100, 10), new TemplateLinkedPositionEdges(false, false, false, true)),
                   "FromCompany",
                   0),
               new TemplateField(
                   new TemplateLinkedPosition("FromCompany", new Size(100, 30), new TemplateLinkedPositionEdges(false, false, false, true)),
                   "FromAddress",
                   0)
            };
            
            // Create a document template
            Template template = new Template(fields);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Templates.Template.GetEnumerator">
      <summary>
            Returns an enumerator for template items.
            </summary>
      <returns>An enumerator for template items.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Templates.Template.Count">
      <summary>
            Gets the total number of template items.
            </summary>
      <value>An integer that represents the total number of template items.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.Template.Item(System.Int32)">
      <summary>
            Gets the template item by an index.
            </summary>
      <param name="index">The zero-based index of the template item.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Templates.TemplateItem" /> class.</returns>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateBarcode">
      <summary>
            Provides the template barcode field.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateBarcode.#ctor(GroupDocs.Parser.Data.Rectangle,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateBarcode" /> class.
            </summary>
      <param name="rectangle">The rectangular area that contains the template barcode field.</param>
      <param name="name">The barcode field name.</param>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateBarcode.#ctor(GroupDocs.Parser.Data.Rectangle,System.String,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateBarcode" /> class.
            </summary>
      <param name="rectangle">The rectangular area that contains the template barcode field.</param>
      <param name="name">The barcode field name.</param>
      <param name="pageIndex">
            An integer value that represents the index of the page where the template item is located; 
            <c>null</c> if the template item is located on any page.
            </param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateBarcode.Rectangle">
      <summary>
            Gets the rectangular area that contains the template barcode field.
            </summary>
      <value>
            An instance of <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class that represents the rectangular area that contains the template barcode field.
            </value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateField">
      <summary>
            Provides the template text field.
            </summary>
      <remarks>
        <para>Text fields are defined by its position on the page. There are three ways to define a text field:</para>
        <list type="bullet">
          <item>
            <see cref="T:GroupDocs.Parser.Templates.TemplateFixedPosition">Using the rectangular area</see>
          </item>
          <item>
            <see cref="T:GroupDocs.Parser.Templates.TemplateRegexPosition">Using the regular expression</see>
          </item>
          <item>
            <see cref="T:GroupDocs.Parser.Templates.TemplateLinkedPosition">Using the linked field</see>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateField.#ctor(GroupDocs.Parser.Templates.TemplatePosition,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateField" /> class.
            </summary>
      <param name="position">The field position.</param>
      <param name="name">The field name.</param>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateField.#ctor(GroupDocs.Parser.Templates.TemplatePosition,System.String,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateField" /> class.
            </summary>
      <param name="position">The field position.</param>
      <param name="name">The field name.</param>
      <param name="pageIndex">
            An integer value that represents the index of the page where the template item is located; 
            <c>null</c> if the template item is located on any page.
            </param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateField.Position">
      <summary>
            Gets the value that describes how to find the template field on the document page.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Templates.TemplatePosition" /> descendant class.</value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateFixedPosition">
      <summary>
            Provides a template field position which is defined by the rectangular area.
            </summary>
      <example>
        <para>This is simplest way to define the field position.
            It requires to set a rectangular area on the page that bounds the field value.
            All the text that is contained (even partially) into the rectangular area will be extracted as a value:</para>
        <code lang="c#">
            // Create a fixed template field with "Address" name which is bounded by a rectangle at the position (35, 160) and with the size (110, 20)
            TemplateField templateField = new TemplateField(
                new TemplateFixedPosition(new Rectangle(new Point(35, 160), new Size(110, 20))),
                "Address");
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateFixedPosition.#ctor(GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateFixedPosition" /> class.
            </summary>
      <param name="rectangle">The rectangular area that contains the template field.</param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateFixedPosition.Rectangle">
      <summary>
            Gets the rectangular area that contains the template field.
            </summary>
      <value>
            An instance of <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class that represents the rectangular area that contains the template field.
            </value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateItem">
      <summary>
            Provides a base abstract class for template items.
            </summary>
      <remarks>
            The inheritors of <see cref="T:GroupDocs.Parser.Templates.TemplateItem" /> class are used in <see cref="T:GroupDocs.Parser.Templates.Template" /> collection.    
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateItem.#ctor(System.String,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateItem" /> class.
            </summary>
      <param name="name">The template item name.</param>
      <param name="pageIndex">
            An integer value that represents the index of the page where the template item is located; 
            <c>null</c> if the template item is located on any page.
            </param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateItem.Name">
      <summary>
            Gets the name of the template item.
            </summary>
      <value>An uppercase string value that represents a name of the template item.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateItem.PageIndex">
      <summary>
            Gets the page index of the template item.
            </summary>
      <value>
            An integer value that represents the index of the page where the template item is located; 
            <c>null</c> if the template item is located on any page.</value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateLinkedPosition">
      <summary>
            Provides a template field position which uses the linked field.
            </summary>
      <example>
        <para>
            The following example shows the code for the situation
            if it's known that the field with an invoice number is placed on the right 
            of "Invoice number" string the following code is used:
            </para>
        <code lang="c#">
            // Create a regex template field to find "Invoice Number" text
            TemplateField invoice = new TemplateField(new TemplateRegexPosition("Invoice Number"), "Invoice");
            
            // Create a related template field associated with "Invoice" field and extract the value on the right of it
            TemplateField invoiceNumber = new TemplateField(
                new TemplateLinkedPosition("invoice", new Size(100, 15), new TemplateLinkedPositionEdges(false, false, true, false)),
                "InvoiceNumber");
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateLinkedPosition.#ctor(System.String,GroupDocs.Parser.Data.Size,GroupDocs.Parser.Templates.TemplateLinkedPositionEdges)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateLinkedPosition" /> class.
            </summary>
      <param name="linkedFieldName">The name of the linked field.</param>
      <param name="searchArea">The size of the area where a field is searched.</param>
      <param name="edges">The edges of the linked field where a field is searched.</param>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateLinkedPosition.#ctor(System.String,GroupDocs.Parser.Data.Size,GroupDocs.Parser.Templates.TemplateLinkedPositionEdges,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateLinkedPosition" /> class.
            </summary>
      <param name="linkedFieldName">The name of the linked field.</param>
      <param name="searchArea">The size of the area where a field is searched.</param>
      <param name="edges">The edges of the linked field where a field is searched.</param>
      <param name="autoScale">The value that indicates whether <paramref name="searchArea" /> is scaled by the linked field size.</param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPosition.LinkedFieldName">
      <summary>
            Gets the linked field name.
            </summary>
      <value>An uppercase string value that represents the linked field name.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPosition.SearchArea">
      <summary>
            Gets the size of the area where a field is searched.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Size" /> class that represents the size of the area where a field is searched.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPosition.Edges">
      <summary>
            Gets the edges of the linked field where a field is searched.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges" /> class that represents the edges of the linked field where a field is searched.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPosition.AutoScale">
      <summary>
            Gets the value that indicates whether <see cref="P:GroupDocs.Parser.Templates.TemplateLinkedPosition.SearchArea" /> is scaled by the linked field size.
            </summary>
      <value>
        <c>true</c> if <see cref="P:GroupDocs.Parser.Templates.TemplateLinkedPosition.SearchArea" /> is scaled by the linked field size; otherwise, <c>false</c></value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges">
      <summary>
            Provides the edges of the linked field where the text field is seached. 
            <see cref="T:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges" /> is used in <see cref="T:GroupDocs.Parser.Templates.TemplateLinkedPosition" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges" /> class.
            </summary>
      <param name="left">The value that indicates whether a field is searched by the left from the linked field.</param>
      <param name="top">The value that indicates whether a field is searched by the top from the linked field.</param>
      <param name="right">The value that indicates whether a field is searched by the right from the linked field.</param>
      <param name="bottom">The value that indicates whether a field is searched by the bottom from the linked field.</param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges.IsEmpty">
      <summary>
            Gets the value that indicates whether the instance is empty.
            </summary>
      <value>
        <c>true</c> if the instance is empty (all fields are <c>false</c>); otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges.Left">
      <summary>
            Gets the value that indicates whether a field is searched by the left from the linked field.
            </summary>
      <value>
        <c>true</c> if a field is searched by the left from the linked field; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges.Top">
      <summary>
            Gets the value that indicates whether a field is searched by the top from the linked field.
            </summary>
      <value>
        <c>true</c> if a field is searched by the top from the linked field; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges.Right">
      <summary>
            Gets the value that indicates whether a field is searched by the right from the linked field.
            </summary>
      <value>
        <c>true</c> if a field is searched by the right from the linked field; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateLinkedPositionEdges.Bottom">
      <summary>
            Gets the value that indicates whether a field is searched by the bottom from the linked field.
            </summary>
      <value>
        <c>true</c> if a field is searched by the bottom from the linked field; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplatePosition">
      <summary>
            Provides a base abstract class for template positions.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplatePosition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplatePosition" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateRegexPosition">
      <summary>
            Provides a template field position which uses the regular expression.
            </summary>
      <example>
        <para>
            The following example shows the situation
            if the document contains "Invoice Number INV-12345" then template field can be defined in the following way:
            </para>
        <code lang="c#">
            // Create a regex template field with "InvoiceNumber" name
            TemplateField templateField = new TemplateField(
                new TemplateRegexPosition("Invoice Number\\s+[A-Z0-9\\-]+"),
                "InvoiceNumber");
            </code>
        <para>
            In this case as a value the entire string is extracted.
            To extract only a part of the string the regular expression group "value" is used:
            </para>
        <code lang="c#">
            // Create a regex template field with "InvoiceNumber" name with "value" group
            TemplateField templateField = new TemplateField(
                new TemplateRegexPosition("Invoice Number\\s+(?&lt;value&gt;[A-Z0-9\\-]+)"),
                "InvoiceNumber");
            </code>
        <para>In this case as a value "INV-3337" string is extracted.</para>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateRegexPosition.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateRegexPosition" /> class.
            </summary>
      <param name="expression">The regular expression.</param>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateRegexPosition.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateRegexPosition" /> class.
            </summary>
      <param name="expression">The regular expression.</param>
      <param name="matchCase">The value that indicates whether a text case isn't ignored.</param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateRegexPosition.Expression">
      <summary>
            Gets the regular expression.
            </summary>
      <value>A string that represents the regular expression.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateRegexPosition.MatchCase">
      <summary>
            Gets the value that indicates whether a text case isn't ignored.
            </summary>
      <value>
        <c>true</c> if a text case isn't ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateTable">
      <summary>
            Provides the template table.
            </summary>
      <remarks>
        <para>There are two ways to define a table:</para>
        <list type="bullet">
          <item>
            Using <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> class. 
            In this case the table is defined by its position on the page: 
            rectangular area, columns and rows separators.
            </item>
          <item>
            Using <see cref="T:GroupDocs.Parser.Templates.TemplateTableParameters" /> class.
            In this case the table is detected automatically by algorithms with set parameters.
            See <see cref="T:GroupDocs.Parser.Templates.TemplateTableParameters" /> class for more information.
            </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateTable.#ctor(GroupDocs.Parser.Templates.TemplateTableLayout,System.String,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateTable" /> class.
            </summary>
      <param name="layout">The table layout.</param>
      <param name="name">The table name.</param>
      <param name="pageIndex">
            The index of the page where the template table is located; 
            <c>null</c> if the template table is located on any page.
            </param>
      <example>
        <para>Template table is set by table layout if the table can't be detected automatically:</para>
        <code lang="c#">
            TemplateTableLayout layout = new TemplateTableLayout(
                new double[] { 50, 95, 275 },
                new double[] { 325, 340, 365 });
             
            TemplateTable table = new TemplateTable(layout, "Details", null);
            
            // Create a document template
            Template template = new Template(new TemplateItem[] { table });
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateTable.#ctor(GroupDocs.Parser.Templates.TemplateTableParameters,System.String,System.Nullable{System.Int32})">
      <summary>
             Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateTable" /> class.
             </summary>
      <param name="parameters">The parameters to detect the table in the automatic mode.</param>
      <param name="name">The table name.</param>
      <param name="pageIndex">
             The index of the page where the template table is located; 
             <c>null</c> if the template table is located on any page.
             </param>
      <example>
        <para>If a template table is set by detector parameters, the table is detected automatically:</para>
        <code lang="c#">
             TemplateTableParameters parameters = new TemplateTableParameters(
                 new Rectangle(new Point(175, 350), new Size(400, 200)),
                 new double[] { 185, 370, 425, 485, 545 });
             
             TemplateTable table = new TemplateTable(parameters, "Details", 0);
            
             // Create a document template
             Template template = new Template(new TemplateItem[] { table });
             </code>
      </example>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTable.Layout">
      <summary>
            Gets the table layout.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> class that represents the table layout; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTable.Parameters">
      <summary>
            Gets the parameters to detect the table in the automatic mode.
            </summary>
      <value>
            An instance of <see cref="T:GroupDocs.Parser.Templates.TemplateTableParameters" /> class that represents the parameters to detect the table in the automatic mode;
            <c>null</c> if it isn't set.
            </value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateTableLayout">
      <summary>
            Provides the template table layout which is used by <see cref="T:GroupDocs.Parser.Templates.TemplateTable" /> class to define table position.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateTableLayout.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> class.
            </summary>
      <param name="verticalSeparators">The table columns separators.</param>
      <param name="horizontalSeparators">The table rows separators.</param>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateTableLayout.MoveTo(GroupDocs.Parser.Data.Point)">
      <summary>
            Creates a new layout with the same size, separators and position in the <paramref name="point" />.
            </summary>
      <param name="point">The position of the new layout.</param>
      <returns>A new layout with the same size, separators and position in the <paramref name="point" />.</returns>
      <example>
        <para>
            This functionality allows to move Table Layout.
            </para>
        <para>
            For example, a document has tables on each page (or a set of documents with a table on the page). 
            These tables differ by position and content, but have the same columns and rows. In this case a user can define 
            <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> object at <c>(0, 0)</c> once and then move it to the location of the definite table.
            </para>
        <para>
            If the table position depends on the other object of the page, a user can define <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> object based 
            on template document and then move it according to an anchor object. For example, if this is a summary table and 
            it is followed by details table (which can contain a different count of rows). In this case a user can define 
            <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> object on template document (with the known details table rectangle) and then move 
            <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> object according to the difference of details table rectangle of template and real document.
            </para>
        <para>
          <see cref="M:GroupDocs.Parser.Templates.TemplateTableLayout.MoveTo(GroupDocs.Parser.Data.Point)" /> method returns a copy of the current object. 
            A user can pass any coordinates (even negative - then layout will be moved to the left/top).
            </para>
        <code lang="c#">
            // Create a table layout
            TemplateTableLayout layout = new TemplateTableLayout(
                new double[] { 0, 25, 150, 180, 230 },
                new double[] { 0, 15, 30, 45, 60, 75 });
            
            // Print a rectangle
            Rectangle rect = layout.Rectangle;
            
            // Prints: pos: (0, 0) size: (230, 75)
            Console.WriteLine(string.Format("pos: ({0}, {1}) size: ({2}, {3})", rect.Left, rect.Top, rect.Size.Width, rect.Size.Height));
            
            // Move layout to the definite table location
            TemplateTableLayout movedLayout = layout.MoveTo(new Point(315, 250));
            
            // Ensure that the first separators are moved:
            Console.WriteLine(movedLayout.VerticalSeparators[0]); // prints: 315
            Console.WriteLine(movedLayout.HorizontalSeparators[0]); // prints: 250
            
            Rectangle movedRect = movedLayout.Rectangle;
            
            // Prints: pos: (315, 250) size: (230, 75)
            Console.WriteLine(string.Format("pos: ({0}, {1}) size: ({2}, {3})", movedRect.Left, movedRect.Top, movedRect.Size.Width, movedRect.Size.Height));
            
            // movedLayout object is a copy of layout object, thus we can tune separators without the impact on the original layout:
            movedLayout.HorizontalSeparators.Add(90);
            
            Console.WriteLine(movedLayout.HorizontalSeparators.Count); // prints: 7
            Console.WriteLine(layout.HorizontalSeparators.Count); // prints: 6
            </code>
      </example>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableLayout.Rectangle">
      <summary>
            Gets the rectangular area that contains the table.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class that represents the rectangular area that contains the table.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableLayout.VerticalSeparators">
      <summary>
            Gets the table columns separators.
            </summary>
      <value>A collection of double values that represent x-coordinates of the table columns separators.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableLayout.HorizontalSeparators">
      <summary>
            Gets the table rows separators.
            </summary>
      <value>A collection of double values that represent y-coordinates of the table rows separators.</value>
    </member>
    <member name="T:GroupDocs.Parser.Templates.TemplateTableParameters">
      <summary>
            Provides parameters for the table detection algorithms.
            </summary>
      <remarks>
        <para>There are two algorithms to detect a table:</para>
        <list type="bullet">
          <item>
            Allows to detect a table in the rectangular area with set columns.
            This algorithm is useful for simple tables (without merged columns)
            and provides more accurate detection.
            </item>
          <item>
            Allows to detect a table in any place on the page.
            This is a more complex algorithm. It can detect tables in any place on the page.
            Additional parameters help to detect a table more correctly.
            </item>
        </list>
        <para>
            In some cases when algorithms can't detect a table or do it in non-accurate way
            <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> class is used.
            </para>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateTableParameters.#ctor(GroupDocs.Parser.Data.Rectangle,System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateTableParameters" /> class.
            </summary>
      <param name="rectangle">The rectangular area that contains the table.</param>
      <param name="verticalSeparators">The table columns separators.</param>
    </member>
    <member name="M:GroupDocs.Parser.Templates.TemplateTableParameters.#ctor(GroupDocs.Parser.Data.Rectangle,System.Collections.Generic.IEnumerable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Templates.TemplateTableParameters" /> class.
            </summary>
      <param name="rectangle">The rectangular area that contains the table.</param>
      <param name="verticalSeparators">The table columns separators.</param>
      <param name="hasMergedCells">The value that indicates whether the table has merged cells.</param>
      <param name="minRowCount">The minimum number of the table rows.</param>
      <param name="minColumnCount">The minumum number of the table columns.</param>
      <param name="minVerticalSpace">The minumum space between the table columns.</param>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableParameters.Rectangle">
      <summary>
            Gets the rectangular area that contains the table.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class that represents the rectangular area that contains the table; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableParameters.HasMergedCells">
      <summary>
            Gets the value that indicates whether the table has merged cells.
            </summary>
      <value>
        <c>true</c> if the table has merged cells; otherwise, <c>false</c>. <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableParameters.MinRowCount">
      <summary>
            Gets the minimum number of the table rows.
            </summary>
      <value>An integer value that represents the minimum number of the table rows; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableParameters.MinColumnCount">
      <summary>
            Gets the minimum number of the table columns.
            </summary>
      <value>An integer value that represents the minimum number of the table columns; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableParameters.MinVerticalSpace">
      <summary>
            Gets the minumum space between the table columns.
            </summary>
      <value>An integer value that represents the minumum space between the table columns; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Templates.TemplateTableParameters.VerticalSeparators">
      <summary>
            Gets the table columns separators.
            </summary>
      <value>A collection of double values that represent x-coordinates of the table columns separators; <c>null</c> if it isn't set.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.CreatePageStream">
      <summary>
            Represents a method that returns a stream to write page preview data. 
            </summary>
      <param name="pageNumber">The page number of a page to generate a thumbnail.</param>
      <returns>The stream to write the page preview.</returns>
    </member>
    <member name="T:GroupDocs.Parser.Options.DocumentInfo">
      <summary>
            Represents the document information.
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+document+info">Get document info</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Detect+encoding">Detect encoding</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Options.DocumentInfo.FileType">
      <summary>
            Gets the document type.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Options.FileType" /> class that represents the type of the document.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.DocumentInfo.PageCount">
      <summary>
            Gets the total number of document pages.
            </summary>
      <value>An integer value that represents a total number of pages.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.DocumentInfo.RawPageCount">
      <summary>
            Gets the total number of document raw pages.
            </summary>
      <value>An integer value that represents a total number of raw pages.</value>
      <remarks>
            Use <see cref="P:GroupDocs.Parser.Options.DocumentInfo.RawPageCount" /> property instead of <see cref="P:GroupDocs.Parser.Options.DocumentInfo.PageCount" /> property for raw text extraction.
            Some documents have different page numbers in accurate and raw text extraction modes.
            <see cref="P:GroupDocs.Parser.Options.DocumentInfo.PageCount" /> property may perform extra calculations which impacts on text extraction speed in raw mode.
            </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Options.DocumentInfo.Size">
      <summary>
            Gets the size of the document in bytes.
            </summary>
      <value>An integer value that represents the size of the document in bytes.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.DocumentInfo.Pages">
      <summary>
            Gets the information about pages such as the index and page size.
            </summary>
      <value>A collection with instances of <see cref="T:GroupDocs.Parser.Options.PageInfo" /> classes.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.EmailConnection">
      <summary>
            Represents the email connection information.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Options.EmailConnection.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.EmailConnection" /> class.
            </summary>
      <param name="userName">The user name.</param>
      <param name="password">The password.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailConnection.UserName">
      <summary>
            Gets the user name.
            </summary>
      <value>A string value that represents the user name.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailConnection.Password">
      <summary>
            Gets the password.
            </summary>
      <value>A string value that represents the password.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.EmailEwsConnection">
      <summary>
            Represents the email connection information for EWS protocol.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Options.EmailEwsConnection.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.EmailEwsConnection" /> class.
            </summary>
      <param name="mailboxUri">The URI of mailbox.</param>
      <param name="userName">The user name.</param>
      <param name="password">The password.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.EmailEwsConnection.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.EmailEwsConnection" /> class.
            </summary>
      <param name="mailboxUri">The URI of the mailbox.</param>
      <param name="domain">The domain name.</param>
      <param name="userName">The user name.</param>
      <param name="password">The password.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailEwsConnection.MailboxUri">
      <summary>
            Gets the URI of the mailbox.
            </summary>
      <value>A string value that represents a URI of the mailbox.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailEwsConnection.Domain">
      <summary>
            Gets the domain name.
            </summary>
      <value>A string value that represents the domain name.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.EmailImapConnection">
      <summary>
            Represents the email connection information for IMAP protocol.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Options.EmailImapConnection.#ctor(System.String,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.EmailImapConnection" /> class.
            </summary>
      <param name="host">The host name.</param>
      <param name="port">The port number.</param>
      <param name="userName">The user name.</param>
      <param name="password">The password.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailImapConnection.Host">
      <summary>
            Gets the host name.
            </summary>
      <value>A string value that represents the host name.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailImapConnection.Port">
      <summary>
            Gets the port number.
            </summary>
      <value>An integer value that represents the port number.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.EmailPopConnection">
      <summary>
            Represents the email connection information for POP protocol.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Options.EmailPopConnection.#ctor(System.String,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.EmailPopConnection" /> class.
            </summary>
      <param name="host">The host name.</param>
      <param name="port">The port number.</param>
      <param name="userName">The user name.</param>
      <param name="password">The password.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailPopConnection.Host">
      <summary>
            Gets the host name.
            </summary>
      <value>A string value that represents the host name.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.EmailPopConnection.Port">
      <summary>
            Gets the port number.
            </summary>
      <value>An integer value that represents the port number.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.Features">
      <summary>
            Represents the supported features list. Allows to obtain information which features are supported or not for the document.
            </summary>
      <remarks>
        <para>An instance of this class is used as <see cref="P:GroupDocs.Parser.Parser.Features" /> property.
            See the usage examples there.</para>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+supported+features">Get supported features</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.Features.IsFeatureSupported(System.String)">
      <summary>
            Returns the value that indicates whether the feature is supported.
            </summary>
      <param name="featureName">The feature name.</param>
      <returns>
        <c>true</c> if the feature is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Text">
      <summary>
            Gets the value that indicates whether text extraction is supported.
            </summary>
      <returns>
        <c>true</c> if text extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.TextPage">
      <summary>
            Gets the value that indicates whether text page extraction is supported.
            </summary>
      <returns>
        <c>true</c> if text page extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.FormattedText">
      <summary>
            Gets the value that indicates whether formatted text extraction is supported.
            </summary>
      <returns>
        <c>true</c> if formatted text extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.FormattedTextPage">
      <summary>
            Gets the value that indicates whether formatted text page extraction is supported.
            </summary>
      <returns>
        <c>true</c> if formatted text page extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Search">
      <summary>
            Gets the value that indicates whether text search is supported.
            </summary>
      <returns>
        <c>true</c> if text search is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Highlight">
      <summary>
            Gets the value that indicates whether highlight extraction is supported.
            </summary>
      <returns>
        <c>true</c> if highlight extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Structure">
      <summary>
            Gets the value that indicates whether text structure extraction is supported.
            </summary>
      <returns>
        <c>true</c> if text structure extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Toc">
      <summary>
            Gets the value that indicates whether table of contents extraction is supported.
            </summary>
      <returns>
        <c>true</c> if table of contents extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Container">
      <summary>
            Gets the value that indicates whether container extraction is supported.
            </summary>
      <returns>
        <c>true</c> if container extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Metadata">
      <summary>
            Gets the value that indicates whether metadata extraction is supported.
            </summary>
      <returns>
        <c>true</c> if metadata extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.TextAreas">
      <summary>
            Gets the value that indicates whether text areas extraction is supported.
            </summary>
      <returns>
        <c>true</c> if text areas extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Images">
      <summary>
            Gets the value that indicates whether images extraction is supported.
            </summary>
      <returns>
        <c>true</c> if images extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Hyperlinks">
      <summary>
            Gets the value that indicates whether hyperlinks extraction is supported.
            </summary>
      <returns>
        <c>true</c> if hyperlinks extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Barcodes">
      <summary>
            Gets the value that indicates whether barcodes extraction is supported.
            </summary>
      <returns>
        <c>true</c> if barcodes extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.Tables">
      <summary>
            Gets the value that indicates whether tables extraction is supported.
            </summary>
      <returns>
        <c>true</c> if tables extraction is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.ParseByTemplate">
      <summary>
            Gets the value that indicates whether parsing by template is supported.
            </summary>
      <returns>
        <c>true</c> if parsing by template is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.Features.ParseForm">
      <summary>
            Gets the value that indicates whether form parsing is supported.
            </summary>
      <returns>
        <c>true</c> if form parsing is supported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GroupDocs.Parser.Options.FileFormat">
      <summary>
            Defines a type of the file.
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Loading+specific+file+formats">Loading specific file formats</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Unknown">
      <summary>
            Default value.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.WordProcessing">
      <summary>
            Word Processing document (DOC, DOCX, ODT, etc).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Spreadsheet">
      <summary>
            Spreadsheet document (XLS, XLSX, ODS, etc).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Presentation">
      <summary>
            Presentation document (PPT, PPTX, ODP, etc).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Email">
      <summary>
            Email document (email messages or email message containers).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Pdf">
      <summary>
            PDF document.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Markup">
      <summary>
            Markup document (HTML, XML, Markdown, etc).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Ebook">
      <summary>
            Ebook document (ePUB, FictionBook, etc).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Note">
      <summary>
            Note document.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Archive">
      <summary>
            Archive file.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Database">
      <summary>
            Database files (via ADO.NET).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileFormat.Image">
      <summary>
            Image file.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.FileInfo">
      <summary>
            Represents the file information.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.FileInfo.FileType">
      <summary>
            Gets the document type.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Options.FileType" /> class that represents the type of the document.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.FileInfo.Size">
      <summary>
            Gets the size of the document in bytes.
            </summary>
      <value>An integer value that represents the size of the document in bytes.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.FileInfo.IsEncrypted">
      <summary>
            Gets a value that represents whether a file is password-protected.
            </summary>
      <value>A boolean true if a file is password-protected; otherwise false.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.FileType">
      <summary>
            Represents the file type. Provides methods to obtain list of all file types supported by <b>GroupDocs.Parser</b>.
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Supported+Document+Formats">Supported Document Formats</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+supported+file+formats">Get supported file formats</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+document+info">Get document info</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.Unknown">
      <summary>
            Represents unknown file type.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DOC">
      <summary>
                Files with .doc extension represent documents generated by Microsoft Word or other word processing
                documents in binary file format. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/word-processing/doc/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DOT">
      <summary>
                Files with .DOT extension are template files created by Microsoft Word to have pre-formatted settings
                for generation of further DOC or DOCX files. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/word-processing/dot/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DOCX">
      <summary>
                DOCX is a well-known format for Microsoft Word documents. Introduced from 2007 with the release
                of Microsoft Office 2007, the structure of this new Document format was changed from plain binary
                to a combination of XML and binary files. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/word-processing/docx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DOCM">
      <summary>
                DOCM files are Microsoft Word 2007 or higher generated documents with the ability to run macros.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/word-processing/docm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DOTX">
      <summary>
                Files with DOTX extension are template files created by Microsoft Word to have pre-formatted settings
                for generation of further DOCX files. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/word-processing/dotx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DOTM">
      <summary>
                A file with DOTM extension represents template file created with Microsoft Word 2007 or higher.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/word-processing/dotm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.TXT">
      <summary>
                A file with .TXT extension represents a text document that contains plain text in the form of lines.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/word-processing/txt/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.TEXT">
      <summary>
                A file with .TEXT extension represents a text document that contains plain text in the form of lines.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/word-processing/txt/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.ODT">
      <summary>
                ODT files are type of documents created with word processing applications that are based on OpenDocument
                Text File format. These are created with word processor applications such as free OpenOffice Writer and
                can hold content such as text, images, objects and styles. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/word-processing/odt/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.OTT">
      <summary>
                Files with OTT extension represent template documents generated by applications in compliance with 
                the OASIS' OpenDocument standard format. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/word-processing/ott/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.RTF">
      <summary>
                Introduced and documented by Microsoft, the Rich Text Format (RTF) represents a method of encoding
                formatted text and graphics for use within applications. The format facilitates cross-platform document
                exchange with other Microsoft Products, thus serving the purpose of interoperability. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/word-processing/rtf/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PDF">
      <summary>
                Portable Document Format (PDF) is a type of document created by Adobe back in 1990s. The purpose of this
                file format was to introduce a standard for representation of documents and other reference material in
                a format that is independent of application software, hardware as well as Operating System. Learn more
                about this file format <a target="_blank" href="https://wiki.fileformat.com/view/pdf/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.HTM">
      <summary>
                Files with HTM extension represent Hypertext Markup Language for creating web pages 
                for display in web browsers such as Google Chrome, Internet Explorer, Firefox and a number of others.
                Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/web/htm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.HTML">
      <summary>
                HTML (Hyper Text Markup Language) is the extension for web pages created for display in browsers.
                Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/web/html/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XHTML">
      <summary>
                The XHTML is a text based file format with markup in the XML, using a reformulation of HTML 4.0.
                Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/web/xhtml/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.MHT">
      <summary>
                Files with MHT extension represent a web page archive format that can be created 
                by a number of different applications. Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/web/mhtml/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.MHTML">
      <summary>
                Files with MHTML extension represent a web page archive format that can be created 
                by a number of different applications. Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/web/mhtml/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XML">
      <summary>
                XML stands for Extensible Markup Language that is similar to HTML 
                but different in using tags for defining objects. Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/web/xml/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.MD">
      <summary>
                Text files created with Markdown language dialects is saved with 
                .MD or .MARKDOWN file extension. Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/word-processing/md/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.FB2">
      <summary>
                Files with FB2 extension are FictionBook 2.0 eBook files that contains the structure of the eBook.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/ebook/fb2/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.CHM">
      <summary>
                The CHM file format represents Microsoft HTML help file that consists of a collection of HTML pages.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/web/chm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.EPUB">
      <summary>
                Files with .EPUB extension are an e-book file format that provide 
                a standard digital publication format for publishers and consumers.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/ebook/epub/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLS">
      <summary>
                Files with XLS extension represent Excel Binary File Format. Such files can be created by Microsoft Excel
                as well as other similar spreadsheet programs such as OpenOffice Calc or Apple Numbers. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/specification/spreadsheet/xls/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLSX">
      <summary>
                XLSX is well-known format for Microsoft Excel documents that was introduced by Microsoft with the release
                of Microsoft Office 2007. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/specification/spreadsheet/xlsx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLSM">
      <summary>
                Files with XLSM extension is a type of Spreasheet files that support Macros. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/specification/spreadsheet/xlsm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLSB">
      <summary>
                XLSB file format specifies the Excel Binary File Format, which is a collection of records and
                structures that specify Excel workbook content. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/specification/spreadsheet/xlsb/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLT">
      <summary>
                Files with .XLT extension are template files created with Microsoft Excel which is a spreadsheet
                application which comes as part of Microsoft Office suite. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/specification/spreadsheet/xlt/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLTX">
      <summary>
                Files with XLTX extension represent Microsoft Excel Template files that are based on the Office OpenXML
                file format specifications. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/specification/spreadsheet/xltx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLTM">
      <summary>
                The XLTM file extension represents files that are generated by Microsoft Excel as Macro-enabled
                template files. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/specification/spreadsheet/xltm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLA">
      <summary>
                The Excel 97-2003 Add-In, a supplemental program that is designed to run additional code. 
                Supports the use of VBA projects.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.XLAM">
      <summary>
                The XML-based and macro-enabled Add-In format for Excel 2010 and Excel 2007. 
                An Add-In is a supplemental program that is designed to run additional code. 
                Supports the use of VBA projects and Excel 4.0 macro sheets (.xlm).
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.CSV">
      <summary>
                Files with CSV (Comma Separated Values) extension represent plain text files
                that contain records of data with comma separated values. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/spreadsheet/csv/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.TSV">
      <summary>
                A Tab-Separated Values (TSV) file format represents data separated with tabs in plain text format.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/spreadsheet/tsv/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.ODS">
      <summary>
                Files with ODS extension stand for OpenDocument Spreadsheet Document format that are editable by user.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/spreadsheet/ods/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.OTS">
      <summary>
                The OTS files contain template files used by the OpenOffice spreadsheet application.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.NUMBERS">
      <summary>
                Files that contain the .numbers file extension are files that are created by 
                the Apple iWork Numbers spreadsheet application.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PPT">
      <summary>
                A file with PPT extension represents PowerPoint file that consists of a collection of slides for
                displaying as SlideShow. It specifies the Binary File Format used by Microsoft PowerPoint 97-2003.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/presentation/ppt/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PPTX">
      <summary>
                Files with PPTX extension are presentation files created with popular Microsoft PowerPoint application.
                Unlike the previous version of presentation file format PPT which was binary, the PPTX format is based
                on the Microsoft PowerPoint open XML presentation file format. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/pptx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PPS">
      <summary>
                PPS, PowerPoint Slide Show, files are created using Microsoft PowerPoint for Slide Show purpose.
                PPS file reading and creation is supported by Microsoft PowerPoint 97-2003. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/pps/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PPSX">
      <summary>
                PPSX, Power Point Slide Show, file are created using Microsoft PowerPoint 2007 and above for
                Slide Show purpose. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/ppsx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.ODP">
      <summary>
                Files with ODP extension represent presentation file format used by OpenOffice.org
                in the OASISOpen standard. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/odp/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.POT">
      <summary>
                Files with .POT extension represent Microsoft PowerPoint template files created 
                by PowerPoint 97-2003 versions. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/pot/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PPTM">
      <summary>
                Files with PPTM extension are Macro-enabled Presentation files that are created with
                Microsoft PowerPoint 2007 or higher versions. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/pptm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.POTX">
      <summary>
                Files with .POTX extension represent Microsoft PowerPoint template presentations that are created with
                Microsoft PowerPoint 2007 and above. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/potx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.POTM">
      <summary>
                Files with POTM extension are Microsoft PowerPoint template files with support for Macros. POTM files
                are created with PowerPoint 2007 or above and contains default settings that can be used to create
                further presentation files. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/potm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PPSM">
      <summary>
                Files with PPSM extension represent Macro-enabled Slide Show file format created with Microsoft
                PowerPoint 2007 or higher. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/ppsm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.OTP">
      <summary>
                Files with .OTP extension represent presentation template files created by applications 
                in OASIS OpenDocument standard format. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/presentation/otp/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.MSG">
      <summary>
                MSG is a file format used by Microsoft Outlook and Exchange to store email messages, contact,
                appointment, or other tasks. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/email/msg/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.EML">
      <summary>
                EML file format represents email messages saved using Outlook and other relevant applications.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/email/eml/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.EMLX">
      <summary>
                The EMLX file format is implemented and developed by Apple. The Apple Mail application uses the EMLX
                file format for exporting the emails. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/email/emlx/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PST">
      <summary>
                Files with .PST extension represent Outlook Personal Storage Files (also called Personal Storage Table)
                that store variety of user information. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/email/pst/">here</a></summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.OST">
      <summary>
                OST or Offline Storage Files represent user's mailbox data in offline mode on local machine upon registration
                with Exchange Server using Microsoft Outlook. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/email/ost/">here</a></summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.ONE">
      <summary>
                File represented by .ONE extension are created by Microsoft OneNote application.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/note-taking/one/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.ZIP">
      <summary>
                ZIP file extension represents archives that can hold one or more files or directories.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/compression/zip/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.SEVENZ">
      <summary>
                7z is an archiving format for compressing files and folders with a high compression ratio.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/compression/7z/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.RAR">
      <summary>
                Files with .rar extension represent archive files that are created for storing information in compressed or normal form.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/compression/rar/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.TAR">
      <summary>
                Files with .tar extension are archives created with Unix-based utility for collecting one or more files.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/compression/tar/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.GZ">
      <summary>
                Files with .gz extension are compressed files created with gzip compression application.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/compression/gz/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.BZ2">
      <summary>
                Compressed file using Bzip2 algorithm.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.TIF">
      <summary>
                TIF, Tagged Image File Format, represents raster images that are meant for usage on a variety
                of devices that comply with this file format standard. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/image/tiff/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.TIFF">
      <summary>
                TIFF, Tagged Image File Format, represents raster images that are meant for usage on a variety
                of devices that comply with this file format standard. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/image/tiff/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.JPG">
      <summary>
                A JPG is a type of image format that is saved using the method of lossy compression.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/jpeg/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.JPEG">
      <summary>
                A JPEG is a type of image format that is saved using the method of lossy compression.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/jpeg/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PNG">
      <summary>
                PNG, Portable Network Graphics, refers to a type of raster image file format that use loseless compression.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/png/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.GIF">
      <summary>
                A GIF or Graphical Interchange Format is a type of highly compressed image.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/gif/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.BMP">
      <summary>
                Files having extension .BMP represent Bitmap Image files that are used to store bitmap digital images.
                These images are independent of graphics adapter and are also called device independent bitmap (DIB) file
                format. Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/bmp/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.ICO">
      <summary>
                Files with ICO extension are image file types used as icon for representation of an application on Microsoft Windows.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/ico/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.JP2">
      <summary>
                JPEG 2000 (JP2) is an image coding system and state-of-the-art image compression standard.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/jp2/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.JPF">
      <summary>
                JPEG 2000 (JPF) is an image coding system and state-of-the-art image compression standard. Designed,
                using wavelet technology JPEG 2000 can code lossless content in any quality at once. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/image/jp2/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.JPX">
      <summary>
                JPEG 2000 (JPX) is an image coding system and state-of-the-art image compression standard. Designed,
                using wavelet technology JPEG 2000 can code lossless content in any quality at once. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/image/jp2/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.JPM">
      <summary>
                JPEG 2000 (JPM) is an image coding system and state-of-the-art image compression standard. Designed,
                using wavelet technology JPEG 2000 can code lossless content in any quality at once. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/image/jp2/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.J2C">
      <summary>
                JPEG 2000 (J2C) is an image coding system and state-of-the-art image compression standard. Designed,
                using wavelet technology JPEG 2000 can code lossless content in any quality at once. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/image/jp2/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.J2K">
      <summary>
                JPEG 2000 (J2K) is an image coding system and state-of-the-art image compression standard. Designed,
                using wavelet technology JPEG 2000 can code lossless content in any quality at once. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/image/jp2/">here</a>.        
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.JPC">
      <summary>
                JPEG 2000 (JPC) is an image coding system and state-of-the-art image compression standard. Designed,
                using wavelet technology JPEG 2000 can code lossless content in any quality at once. Learn more about
                this file format <a target="_blank" href="https://wiki.fileformat.com/image/jp2/">here</a>.        
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DIB">
      <summary>
                A DIB (Device Independent Bitmap) file is a raster image file that is similar in structure 
                to the standard Bitmap files (BMP) but has a different header. Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/image/dib/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.WMF">
      <summary>
                Files with WMF extension represent Microsoft Windows Metafile (WMF) for storing vector 
                as well as bitmap-format images data. Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/image/wmf/">here</a>.     
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.EMF">
      <summary>
                Enhanced metafile format (EMF) stores graphical images device-independently.
                Learn more about this file format 
                <a target="_blank" href="https://wiki.fileformat.com/image/emf/">here</a>. 
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.WEBP">
      <summary>
                WebP, introduced by Google, is a modern raster web image file format that is based on lossless and
                lossy compression. It provides same image quality while considerably reducing the image size.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/webp/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DJVU">
      <summary>
                DjVu, pronounced as “déjà vu”, is a graphics file format intended for scanned documents and 
                books especially those which contain the combination of text, drawings, images and photographs.
                Learn more about this file format <a target="_blank" href="https://wiki.fileformat.com/image/djvu/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.CGM">
      <summary>
                Computer Graphics Metafile (CGM) is free, platform-independent, international standard metafile
                format for storing and exchanging of vector graphics (2D), raster graphics, and text.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/page-description-language/cgm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PCL">
      <summary>
                PCL stands for Printer Command Language which is a Page Description Language 
                introduced by Hewlett Packard (HP). Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/page-description-language/pcl/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PSD">
      <summary>
                PSD, Photoshop Document, represents Adobe Photoshop's native file format used 
                for graphics designing and development. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/image/psd/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.DCM">
      <summary>
                Files with .DCM extension represent digital image which stores medical 
                information of patients such as MRIs, CT scans and ultrasound images.
                Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/image/dcm/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PS">
      <summary>
                PostScript (PS) is a general-purpose page description language used 
                in the business of desktop and electronic publishing. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/page-description-language/ps/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.EPS">
      <summary>
                Files with EPS extension essentially describe an Encapsulated PostScript language program 
                that describes the appearance of a single page. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/page-description-language/eps/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.ODG">
      <summary>
                The ODG file format is used by Apache OpenOffice's Draw application to store
                drawing elements as a vector image. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/image/odg/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.SVG">
      <summary>
                An SVG file is a Scalar Vector Graphics file that uses XML based text format
                for describing the appearance of an image. Learn more about this file format
                <a target="_blank" href="https://wiki.fileformat.com/page-description-language/svg/">here</a>.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileType.PICT">
      <summary>
                The PICT file format is a meta-format that can be used for both bitmap images and vector images.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.FromExtension(System.String)">
      <summary>
            Maps file extension to file type.
            </summary>
      <param name="extension">File extension (including the period ".").</param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="extension" /> is null or empty string.</exception>
      <returns>When file type is supported returns it, otherwise returns default <see cref="F:GroupDocs.Parser.Options.FileType.Unknown" /> file type.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.GetSupportedFileTypes">
      <summary>
            Retrieves supported file types
            </summary>
      <returns>Returns sequence of supported file types</returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.Equals(GroupDocs.Parser.Options.FileType)">
      <summary>
            Determines whether the current <see cref="T:GroupDocs.Parser.Options.FileType" /> is the same as specified <see cref="T:GroupDocs.Parser.Options.FileType" /> object.
            </summary>
      <param name="other">The object to compare with the current <see cref="T:GroupDocs.Parser.Options.FileType" /> object.</param>
      <returns>
        <code>true</code> if both <see cref="T:GroupDocs.Parser.Options.FileType" /> objects are the same; otherwise, <code>false</code></returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.Equals(System.Object)">
      <summary>
            Determines whether the current <see cref="T:GroupDocs.Parser.Options.FileType" /> is the same as specified object.
            </summary>
      <param name="obj">The object to compare with the current <see cref="T:GroupDocs.Parser.Options.FileType" /> object.</param>
      <returns>
        <code>true</code> if <code>obj</code> parameter is <see cref="T:GroupDocs.Parser.Options.FileType" /> and is the same as current <see cref="T:GroupDocs.Parser.Options.FileType" /> object; otherwise, <code>false</code></returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.GetHashCode">
      <summary>
            Returns the hash code for the current <see cref="T:GroupDocs.Parser.Options.FileType" /> object.
            </summary>
      <returns>A hash code for the current <see cref="T:GroupDocs.Parser.Options.FileType" /> object.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.op_Equality(GroupDocs.Parser.Options.FileType,GroupDocs.Parser.Options.FileType)">
      <summary>
            Determines whether two <see cref="T:GroupDocs.Parser.Options.FileType" /> objects are the same.
            </summary>
      <param name="left">Left <see cref="T:GroupDocs.Parser.Options.FileType" /> object.</param>
      <param name="right">Right <see cref="T:GroupDocs.Parser.Options.FileType" /> object.</param>
      <returns>
        <code>true</code> if both <see cref="T:GroupDocs.Parser.Options.FileType" /> objects are the same; otherwise, <code>false</code></returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.op_Inequality(GroupDocs.Parser.Options.FileType,GroupDocs.Parser.Options.FileType)">
      <summary>
            Determines whether two <see cref="T:GroupDocs.Parser.Options.FileType" /> objects are not the same.
            </summary>
      <param name="left">Left <see cref="T:GroupDocs.Parser.Options.FileType" /> object.</param>
      <param name="right">Right <see cref="T:GroupDocs.Parser.Options.FileType" /> object.</param>
      <returns>
        <code>true</code> if both <see cref="T:GroupDocs.Parser.Options.FileType" /> objects are not the same; otherwise, <code>false</code></returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.FileType.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.FileType.FileFormat">
      <summary>
            File type name e.g. "Microsoft Word Document".
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.FileType.Extension">
      <summary>
            Filename suffix (including the period ".") e.g. ".doc".
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.FileType.Format">
      <summary>
            Format of the file e.g. "WordProcessing".
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.FileTypeDetectionMode">
      <summary>
            Defines a mode of the file type detection.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileTypeDetectionMode.Default">
      <summary>
            The file type is detected by the file extension; if the file extension isn't recognized,
            the file type is detected by the file content.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileTypeDetectionMode.Extension">
      <summary>
            The file type is detected only by the file extension.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FileTypeDetectionMode.Content">
      <summary>
            The file type is detected only by the file content.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.FormattedTextMode">
      <summary>
            Defines a formatted text mode.
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+formatted+text+from+document">Extract formatted text from document</a>
          </item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/HTML">HTML</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Markdown">Markdown</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Plain+text">Plain text</a></item>
        </list>
      </remarks>
    </member>
    <member name="F:GroupDocs.Parser.Options.FormattedTextMode.Html">
      <summary>
            HTML format.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FormattedTextMode.Markdown">
      <summary>
            Markdown format.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.FormattedTextMode.PlainText">
      <summary>
            Plain text format.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.FormattedTextOptions">
      <summary>
            Provides the options which are used for formatted text extraction.
            </summary>
      <remarks>
        <para>An instance of <see cref="T:GroupDocs.Parser.Options.FormattedTextOptions" /> class is used as parameter
            in <see cref="M:GroupDocs.Parser.Parser.GetFormattedText(GroupDocs.Parser.Options.FormattedTextOptions)" /> and <see cref="M:GroupDocs.Parser.Parser.GetFormattedText(System.Int32,GroupDocs.Parser.Options.FormattedTextOptions)" /> methods.
            See the usage examples there.</para>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+formatted+text+from+document">Extract formatted text from document</a>
          </item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/HTML">HTML</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Markdown">Markdown</a></item>
          <item>Extract a document text as <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Plain+text">Plain text</a></item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.FormattedTextOptions.#ctor(GroupDocs.Parser.Options.FormattedTextMode)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.FormattedTextOptions" /> class.
            </summary>
      <param name="mode">The mode of formatted text extraction.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.FormattedTextOptions.Mode">
      <summary>
            Gets the formatted text extraction mode.
            </summary>
      <value>
        <see cref="T:GroupDocs.Parser.Options.FormattedTextMode" /> enumeration that contains a formatted text extraction mode.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.HighlightOptions">
      <summary>
            Provides the options which are used to extract a highlight (a block of text aroud found text in search scenarios).
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Options.HighlightOptions" /> class is used as parameter 
            in <see cref="M:GroupDocs.Parser.Parser.GetHighlight(System.Int32,System.Boolean,GroupDocs.Parser.Options.HighlightOptions)" /> method.
            See the usage examples there.
            </remarks>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+highlights">Extract highlights</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.HighlightOptions.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.HighlightOptions" /> class which is used to extract a fixed-length highlight.
            </summary>
      <param name="maxLength">The maximum text length.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.HighlightOptions.#ctor(System.Nullable{System.Int32},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.HighlightOptions" /> class which is used to extract a line-limited highlight.
            </summary>
      <param name="maxLength">The maximum text length.</param>
      <param name="isLineLimited">The value that indicates whether the highlight extraction is limited by the start (or the end) of a text line.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.HighlightOptions.#ctor(System.Nullable{System.Int32},System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.HighlightOptions" /> class which is used to extract a highlight with the fixed word count.
            </summary>
      <param name="maxLength">The maximum text length.</param>
      <param name="wordCount">The maximum word count.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.HighlightOptions.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.HighlightOptions" /> class.
            </summary>
      <param name="maxLength">The maximum text length.</param>
      <param name="wordCount">The maximum word count.</param>
      <param name="isLineLimited">The value that indicates whether the highlight extraction is limited by the start (or the end) of a text line.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.HighlightOptions.MaxLength">
      <summary>
            Gets a maximum text length.
            </summary>
      <value>A positive integer value that represents the maximum text length; <c>null</c> if the text length isn't limited.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.HighlightOptions.WordCount">
      <summary>
            Gets a maximum word count.
            </summary>
      <value>A positive integer value that represents the maximum word count; <c>null</c> if the word count isn't limited.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.HighlightOptions.IsLineLimited">
      <summary>
            Gets value that indicates whether highlight extraction is limited by the start (or the end) of a text line.
            </summary>
      <returns>
        <c>true</c> if highlight extraction is limited by the start (or the end) of a text line; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GroupDocs.Parser.Options.IDocumentInfo">
      <summary>
            Represents the document information.
            </summary>
      <remarks>
            The objects which implement this interface are returned by <see cref="M:GroupDocs.Parser.Parser.GetDocumentInfo" /> method.
            See the usage examples there.
            <b>Learn more:</b><list type="bullet"><item><a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+document+info">Get document info</a></item><item><a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Detect+encoding">Detect encoding</a></item></list></remarks>
    </member>
    <member name="P:GroupDocs.Parser.Options.IDocumentInfo.FileType">
      <summary>
            Gets the document type.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Options.FileType" /> class that represents the type of the document.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.IDocumentInfo.PageCount">
      <summary>
            Gets the total number of document pages.
            </summary>
      <value>An integer value that represents a total number of pages.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.IDocumentInfo.RawPageCount">
      <summary>
            Gets the total number of document raw pages.
            </summary>
      <value>An integer value that represents a total number of raw pages.</value>
      <remarks>
            Use <see cref="P:GroupDocs.Parser.Options.IDocumentInfo.RawPageCount" /> property instead of <see cref="P:GroupDocs.Parser.Options.IDocumentInfo.PageCount" /> property for raw text extraction.
            Some documents have different page numbers in accurate and raw text extraction modes.
            <see cref="P:GroupDocs.Parser.Options.IDocumentInfo.PageCount" /> property may perform extra calculations which impacts on text extraction speed in raw mode.
            </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Options.IDocumentInfo.Size">
      <summary>
            Gets the size of the document in bytes.
            </summary>
      <value>An integer value that represents the size of the document in bytes.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.IDocumentInfo.Pages">
      <summary>
            Gets the information about pages such as the index and page size.
            </summary>
      <value>A collection with instances of <see cref="T:GroupDocs.Parser.Options.PageInfo" /> classes.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.ILogger">
      <summary>
            Defines the interface of a logger that is used for logging events and errors during data extraction. 
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Logging">Logging</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.ILogger.Error(System.String,System.Exception)">
      <summary>
            Logs an error that occurred during data extraction.
            </summary>
      <param name="message">The error message.</param>
      <param name="exception">The instance of occured exception.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.ILogger.Warning(System.String)">
      <summary>
            Logs a warning that occurred during data extraction.
            </summary>
      <param name="message">The warning message.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.ILogger.Trace(System.String)">
      <summary>
            Logs an event occurred during data extraction.
            </summary>
      <param name="message">The event message.</param>
    </member>
    <member name="T:GroupDocs.Parser.Options.ImageFormat">
      <summary>
            Defines a format of the image.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.ImageFormat.Bmp">
      <summary>
            Bitmap image.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.ImageFormat.Gif">
      <summary>
            Graphical Interchange Format.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.ImageFormat.Jpeg">
      <summary>
            JPEG image.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.ImageFormat.Png">
      <summary>
            Portable Network Graphic.
            </summary>
    </member>
    <member name="F:GroupDocs.Parser.Options.ImageFormat.WebP">
      <summary>
            WebP Image.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.ImageOptions">
      <summary>
            Provides the options which are used for image extraction.
            </summary>
      <remarks>
        <para>
            An instance of <see cref="T:GroupDocs.Parser.Options.ImageOptions" /> class is used as parameter
            in <see cref="M:GroupDocs.Parser.Data.PageImageArea.GetImageStream(GroupDocs.Parser.Options.ImageOptions)" /> and 
            <see cref="M:GroupDocs.Parser.Data.PageImageArea.Save(System.String,GroupDocs.Parser.Options.ImageOptions)" /> methods. See the usage examples there.
            </para>
        <para>
            It's used to specify the image format for image extraction. 
            </para>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+from+document+page+area">Extract images from document page area</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+images+to+files">Extract images to files</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.ImageOptions.#ctor(GroupDocs.Parser.Options.ImageFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.ImageOptions" /> class.
            </summary>
      <param name="imageFormat">The format of the image.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.ImageOptions.ImageFormat">
      <summary>
            Gets the image format for image extraction.
            </summary>
      <value>
        <see cref="T:GroupDocs.Parser.Options.ImageFormat" /> enumeration that contains an image format.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.LoadOptions">
      <summary>
            Provides the options which are used to open a file. 
            </summary>
      <remarks>
            An instance of this class is used as parameter in <see cref="T:GroupDocs.Parser.Parser" /> class constructors:
            <list type="bullet"><item><see cref="M:GroupDocs.Parser.Parser.#ctor(System.IO.Stream,GroupDocs.Parser.Options.LoadOptions)" /></item><item><see cref="M:GroupDocs.Parser.Parser.#ctor(System.String,GroupDocs.Parser.Options.LoadOptions)" /></item></list><para>See the usage examples there.</para><b>Learn more:</b><list type="bullet"><item><a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Loading+specific+file+formats">Loading specific file formats</a></item><item><a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Password-protected+documents">Loading password-protected documents</a></item></list></remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.LoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.LoadOptions" /> class 
            with empty <see cref="P:GroupDocs.Parser.Options.LoadOptions.Password" />, <see cref="P:GroupDocs.Parser.Options.LoadOptions.FileFormat" /> equal to <see cref="F:GroupDocs.Parser.Options.FileFormat.Unknown" />
            and default encodings.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Options.LoadOptions.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.LoadOptions" /> class
            with <see cref="P:GroupDocs.Parser.Options.LoadOptions.FileFormat" /> equal to <see cref="F:GroupDocs.Parser.Options.FileFormat.Unknown" />
            and default encodings.
            </summary>
      <param name="password">The password to open the password-protected file.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.LoadOptions.#ctor(GroupDocs.Parser.Options.FileFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.LoadOptions" /> class
            with empty <see cref="P:GroupDocs.Parser.Options.LoadOptions.Password" /> and default encodings.
            </summary>
      <param name="fileFormat">The format of the file.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.LoadOptions.#ctor(GroupDocs.Parser.Options.FileFormat,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.LoadOptions" /> class with the password and default encodings.
            </summary>
      <param name="fileFormat">The format of the file.</param>
      <param name="password">The password to open the password-protected file.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.LoadOptions.#ctor(GroupDocs.Parser.Options.FileFormat,System.String,System.Text.Encoding,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.LoadOptions" /> class with custom encodings.
            </summary>
      <param name="fileFormat">The format of the file.</param>
      <param name="password">The password to open the password-protected file.</param>
      <param name="encoding">The encoding of the document.</param>
      <param name="defaultAnsiEncoding">The default ANSI encoding which is used for encoding detection.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.LoadOptions.FileFormat">
      <summary>
            Gets the file format.
            </summary>
      <value>
        <see cref="T:GroupDocs.Parser.Options.FileFormat" /> enumeration that contains a file format.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.LoadOptions.Password">
      <summary>
            Gets the password.
            </summary>
      <value>A string value that represents a password to open the password-protected file.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.LoadOptions.Encoding">
      <summary>
            Gets the encoding of the document.
            </summary>
      <value>
            An instance of <see cref="T:System.Text.Encoding" /> class that represents the document encoding; <c>null</c> if it isn't set.
            </value>
    </member>
    <member name="P:GroupDocs.Parser.Options.LoadOptions.DefaultAnsiEncoding">
      <summary>
            Gets the default ANSI encoding which is used for encoding detection.
            </summary>
      <value>
            An instance of <see cref="T:System.Text.Encoding" /> class that represents the document encoding; <c>null</c> if it isn't set.
            </value>
    </member>
    <member name="T:GroupDocs.Parser.Options.NamespaceDoc">
      <summary>
            The namespace provides classes to specify additional options when parsing data from documents. 
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.PageAreaOptions">
      <summary>
            Provides the options which are used for page areas extraction.
            </summary>
      <remarks>
        <para>An instance of <see cref="T:GroupDocs.Parser.Options.PageAreaOptions" /> class is used as parameter 
            in the following methods:</para>
        <list type="bullet">
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetImages(GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetImages(System.Int32,GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks(System.Int32)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks(GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks(System.Int32,GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
        </list>
        <para>See the usage examples there.</para>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageAreaOptions.#ctor(GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.PageAreaOptions" /> class.
            </summary>
      <param name="rectangle">The rectangular area that contains page areas.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageAreaOptions.Rectangle">
      <summary>
            Gets the rectangular area that contains page areas.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class that represents the rectangular area that contains page areas; <c>null</c> if it isn't set.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.PageInfo">
      <summary>
            Represents the document page information.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageInfo.Width">
      <summary>
            Gets the page width.
            </summary>
      <value>An integer value that represents the page width.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageInfo.Height">
      <summary>
            Gets the page height.
            </summary>
      <value>An integer value that represents the page height.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageInfo.PageNumber">
      <summary>
            Gets the page number.
            </summary>
      <value>A zero-based integer value that represents the page number.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.PageRenderInfo">
      <summary>
            Represents the information of how a page is rendered.
            </summary>
      <remarks>
        <para>Some documents (spreadsheets, for example) are not possible to render a page 
            as a single image. For those documents a page is rendered as a set of tiles. 
            These tiles are placed in the rectangular table.</para>
        <para>
          <see cref="P:GroupDocs.Parser.Options.PageRenderInfo.RowCount" /> and <see cref="P:GroupDocs.Parser.Options.PageRenderInfo.ColumnCount" /> 
            represent the total number of rows and columns of this table. If document page is rendered
            to the single image these properties are equal to 1.</para>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageRenderInfo.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.PageRenderInfo" /> class.
            </summary>
      <param name="pageNumber">The number of the page (starts with 1).</param>
      <param name="rowCount">The total number of tiles rows.</param>
      <param name="columnCount">The total number of tiles columns.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageRenderInfo.GetColumn(System.Int32)">
      <summary>
            Returns the index of column where the tile with <paramref name="tileIndex" /> is placed.
            </summary>
      <param name="tileIndex">The zero-based index of the tile.</param>
      <returns>The zero-based integer value that represents the column index.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageRenderInfo.GetRow(System.Int32)">
      <summary>
            Returns the index of row where the tile with <paramref name="tileIndex" /> is placed.
            </summary>
      <param name="tileIndex">The zero-based index of the tile.</param>
      <returns>The zero-based integer value that represents the row index.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageRenderInfo.PageNumber">
      <summary>
            Gets the page number.
            </summary>
      <value>The integer value that represents the page number (starts with 1).</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageRenderInfo.RowCount">
      <summary>
            Get the total number of tiles rows.
            </summary>
      <value>The integer value that represents the total number of tiles rows.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageRenderInfo.ColumnCount">
      <summary>
            Get the total number of tiles columns.
            </summary>
      <value>The integer value that represents the total number of tiles columns.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.PageTableAreaOptions">
      <summary>
            Provides the options which are used for page table areas extraction.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Options.PageTableAreaOptions" /> class is used as parameter 
            in <see cref="M:GroupDocs.Parser.Parser.GetTables(GroupDocs.Parser.Options.PageTableAreaOptions)" /> and <see cref="M:GroupDocs.Parser.Parser.GetTables(System.Int32,GroupDocs.Parser.Options.PageTableAreaOptions)" /> methods.
            See the usage examples there.
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageTableAreaOptions.#ctor(GroupDocs.Parser.Templates.TemplateTableLayout)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.PageAreaOptions" /> class.
            </summary>
      <param name="tableLayout">The table layout which defines the table on a page.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageTableAreaOptions.TableLayout">
      <summary>
            Gets the table layout which defines the table on a page.
            </summary>
      <value>An instane of <see cref="T:GroupDocs.Parser.Templates.TemplateTableLayout" /> class.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.PageTextAreaOptions">
      <summary>
            Provides the options which are used for page text areas extraction.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Options.PageTextAreaOptions" /> class is used as parameter 
            in <see cref="M:GroupDocs.Parser.Parser.GetTextAreas(GroupDocs.Parser.Options.PageTextAreaOptions)" /> and <see cref="M:GroupDocs.Parser.Parser.GetTextAreas(System.Int32,GroupDocs.Parser.Options.PageTextAreaOptions)" /> methods.
            See the usage examples there.
            <b>Learn more:</b><list type="bullet"><item><a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+areas">Extract text areas</a></item></list></remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageTextAreaOptions.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.PageTextAreaOptions" /> class with the regular expression. 
            Other options are set by default (see remarks for details).
            </summary>
      <param name="expression">The regular expression.</param>
      <remarks>
        <para>The following properties have default values:</para>
        <list type="table">
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.PageTextAreaOptions.MatchCase" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.PageTextAreaOptions.UniteSegments" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.PageTextAreaOptions.IgnoreFormatting" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.PageAreaOptions.Rectangle" />
            </term>
            <description>
              <c>null</c>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageTextAreaOptions.#ctor(System.String,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.PageTextAreaOptions" /> class
            with the regular expression and rectangular area. 
            Other options are set by default (see remarks for details).
            </summary>
      <param name="expression">The regular expression.</param>
      <param name="rectangle">The rectangular area that contains page areas.</param>
      <remarks>
        <para>The following properties have default values:</para>
        <list type="table">
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.PageTextAreaOptions.MatchCase" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.PageTextAreaOptions.UniteSegments" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.PageTextAreaOptions.IgnoreFormatting" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.PageTextAreaOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.PageTextAreaOptions" /> class.
            </summary>
      <param name="expression">The regular expression.</param>
      <param name="matchCase">The value that indicates whether a text case isn't ignored.</param>
      <param name="uniteSegments">The value that indicates whether segments are united.</param>
      <param name="ignoreFormatting">The value that indicates whether text formatting is ignored.</param>
      <param name="rectangle">The rectangular area that contains page areas.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageTextAreaOptions.Expression">
      <summary>
            Gets the regular expression.
            </summary>
      <value>A string that represents the regular expression.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageTextAreaOptions.MatchCase">
      <summary>
            Gets the value that indicates whether a text case isn't ignored.
            </summary>
      <value>
        <c>true</c> if a text case isn't ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageTextAreaOptions.UniteSegments">
      <summary>
            Gets the value that indicates whether segments are united.
            </summary>
      <value>
        <c>true</c> if segments are united; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.PageTextAreaOptions.IgnoreFormatting">
      <summary>
            Gets the value that indicates whether text formatting is ignored.
            </summary>
      <value>
        <c>true</c> if text formatting is ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.ParserSettings">
      <summary>
            Provides the settings which are used to customize data extraction.
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Logging">Logging</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.ParserSettings.#ctor(GroupDocs.Parser.Options.ILogger)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.ParserSettings" /> class.
            </summary>
      <param name="logger">An instance of class that implements <see cref="T:GroupDocs.Parser.Options.ILogger" /> interface.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.ParserSettings.Logger">
      <summary>
            Gets the logger which is used for logging events and errors during data extraction.
            </summary>
      <value>An instance of class that implements <see cref="T:GroupDocs.Parser.Options.ILogger" /> interface.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.PreviewOptions">
      <summary>
            Provides options to sets requirements and stream delegates for preview generation.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.PreviewOptions.PreviewFormats">
      <summary>
            Represents supported preview formats. 
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Options.PreviewOptions.#ctor(GroupDocs.Parser.Options.CreatePageStream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.PreviewOptions" /> class causing the output stream to be closed.
            </summary>
      <param name="createPageStream">Creates a stream for a specific page preview.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.PreviewOptions.#ctor(GroupDocs.Parser.Options.CreatePageStream,GroupDocs.Parser.Options.ReleasePageStream)">
      <summary>
            Initializes a new instance of <see cref="T:GroupDocs.Parser.Options.PreviewOptions" /> class causing the output stream to be returned to the client for further use.
            </summary>
      <param name="createPageStream">Creates a stream for a specific page preview</param>
      <param name="releasePageStream">Notifies that the page preview generation is done and gets the output stream.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.Width">
      <summary>
            Gets or sets the page preview width.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.Height">
      <summary>
            Gets or sets the page preview height.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.PageNumbers">
      <summary>
            Gets or sets an array of page numbers to generate previews.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.PreviewFormat">
      <summary>
            Gets or sets the preview image format. 
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.CreatePageStream">
      <summary>
            Gets or sets an instance of the page stream creation delegate.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.ReleasePageStream">
      <summary>
            Gets or sets an instance of the page preview completion delegate.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.Dpi">
      <summary>
            Gets or sets a dpi.
            </summary>
    </member>
    <member name="P:GroupDocs.Parser.Options.PreviewOptions.PreviewPageRender">
      <summary>
            Gets or sets an instance of the page preview render info delegate.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Options.PreviewPageRender">
      <summary>
            Represents a method which is called before a document page is rendered.
            </summary>
      <param name="info">The information of how a page is rendered.</param>
    </member>
    <member name="T:GroupDocs.Parser.Options.ReleasePageStream">
      <summary>
            Represents a method which releases the stream created by the <see cref="T:GroupDocs.Parser.Options.CreatePageStream" /> delegate. 
            </summary>
      <param name="pageNumber">The page number of a generated page preview.</param>
      <param name="pageStream">The stream containing the generated page preview.</param>
    </member>
    <member name="T:GroupDocs.Parser.Options.SearchOptions">
      <summary>
            Provides the options which are used for text search.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Options.SearchOptions" /> class is used as parameter 
            in <see cref="M:GroupDocs.Parser.Parser.Search(System.String,GroupDocs.Parser.Options.SearchOptions)" /> method. See the usage examples there.
            </remarks>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text">Search text</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+Word+documents">Search text in Microsoft Office Word documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+Excel+spreadsheets">Search text in Microsoft Office Excel spreadsheets</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+Office+PowerPoint+presentations">Search text in Microsoft Office PowerPoint presentations</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+PDF+documents">Search text in PDF documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Emails">Search text in Emails</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+EPUB+eBooks">Search text in EPUB eBooks</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+HTML+documents">Search text in HTML documents</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Search+text+in+Microsoft+OneNote+sections">Search text in Microsoft OneNote sections</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.SearchOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,GroupDocs.Parser.Options.HighlightOptions,GroupDocs.Parser.Options.HighlightOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.SearchOptions" /> class.
            </summary>
      <param name="matchCase">The value that indicates whether a text case isn't ignored.</param>
      <param name="matchWholeWord">The value that indicates whether text search is limited by a whole word.</param>
      <param name="useRegularExpression">The value that indicates whether a regular expression is used.</param>
      <param name="searchByPages">The value that indicates whether the search is performed by pages.</param>
      <param name="leftHighlightOptions">The options for the left highlight.</param>
      <param name="rightHighlightOptions">The options for the right highlight.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.SearchOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,GroupDocs.Parser.Options.HighlightOptions,GroupDocs.Parser.Options.HighlightOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.SearchOptions" /> class which is used to search
            with the highlight options for the left and the right highlight extraction.
            </summary>
      <param name="matchCase">The value that indicates whether a text case isn't ignored.</param>
      <param name="matchWholeWord">The value that indicates whether text search is limited by a whole word.</param>
      <param name="useRegularExpression">The value that indicates whether a regular expression is used.</param>
      <param name="leftHighlightOptions">The options for the left highlight.</param>
      <param name="rightHighlightOptions">The options for the right highlight.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.SearchOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,GroupDocs.Parser.Options.HighlightOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.SearchOptions" /> class which is used to search
            with the same highlight options for the left and the right highlight extraction.
            </summary>
      <param name="matchCase">The value that indicates whether a text case isn't ignored.</param>
      <param name="matchWholeWord">The value that indicates whether text search is limited by a whole word.</param>
      <param name="useRegularExpression">The value that indicates whether a regular expression is used.</param>
      <param name="highlightOptions">The options for both highlights.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.SearchOptions.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.SearchOptions" /> class which is used to search
            without highlight extraction.
            </summary>
      <param name="matchCase">The value that indicates whether a text case isn't ignored.</param>
      <param name="matchWholeWord">The value that indicates whether text search is limited by a whole word.</param>
      <param name="useRegularExpression">The value that indicates whether a regular expression is used.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.SearchOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.SearchOptions" /> class which is used to search by pages and
            without highlight extraction.
            </summary>
      <param name="matchCase">The value that indicates whether a text case isn't ignored.</param>
      <param name="matchWholeWord">The value that indicates whether text search is limited by a whole word.</param>
      <param name="useRegularExpression">The value that indicates whether a regular expression is used.</param>
      <param name="searchByPages">The value that indicates whether the search is performed by pages.</param>
    </member>
    <member name="M:GroupDocs.Parser.Options.SearchOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.SearchOptions" /> class with default values. See remarks for details.
            </summary>
      <remarks>
        <para>The following properties have default values:</para>
        <list type="table">
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.SearchOptions.MatchCase" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.SearchOptions.MatchWholeWord" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.SearchOptions.UseRegularExpression" />
            </term>
            <description>
              <c>false</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.SearchOptions.LeftHighlightOptions" />
            </term>
            <description>
              <c>null</c>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:GroupDocs.Parser.Options.SearchOptions.RightHighlightOptions" />
            </term>
            <description>
              <c>null</c>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Options.SearchOptions.MatchCase">
      <summary>
            Gets the value that indicates whether a text case isn't ignored.
            </summary>
      <value>
        <c>true</c> if a text case isn't ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.SearchOptions.MatchWholeWord">
      <summary>
            Gets the value that indicates whether text search is limited by a whole word.
            </summary>
      <value>
        <c>true</c> if text search is limited by a whole word; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.SearchOptions.UseRegularExpression">
      <summary>
            Gets the value that indicates whether a regular expression is used.
            </summary>
      <value>
        <c>true</c> if a regular expression is used; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.SearchOptions.SearchByPages">
      <summary>
            Gets the value that indicates whether the search is performed by pages.
            </summary>
      <value>
        <c>true</c> if the search is performed by pages; otherwise, <c>false</c> 
            and the search is performed on the whole document without including <see cref="P:GroupDocs.Parser.Data.SearchResult.PageIndex" /> property value 
            in <see cref="T:GroupDocs.Parser.Data.SearchResult" /> class.
            </value>
    </member>
    <member name="P:GroupDocs.Parser.Options.SearchOptions.LeftHighlightOptions">
      <summary>
            Gets the options for the left highlight.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Options.HighlightOptions" /> class; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Options.SearchOptions.RightHighlightOptions">
      <summary>
            Gets the options for the right highlight.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Options.HighlightOptions" /> class; <c>null</c> if it isn't set.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.TextDocumentInfo">
      <summary>
            Represents the text document information.
            </summary>
      <remarks>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Get+document+info">Get document info</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Detect+encoding">Detect encoding</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Options.TextDocumentInfo.Encoding">
      <summary>
            Gets the detected encoding of the text document.
            </summary>
      <value>An instance of <see cref="T:System.Text.Encoding" /> class.</value>
    </member>
    <member name="T:GroupDocs.Parser.Options.TextOptions">
      <summary>
            Provides the options which are used for text extraction.
            </summary>
      <remarks>
        <para>
            An instance of <see cref="T:GroupDocs.Parser.Options.TextOptions" /> class is used as parameter
            in <see cref="M:GroupDocs.Parser.Parser.GetText(GroupDocs.Parser.Options.TextOptions)" /> and <see cref="M:GroupDocs.Parser.Parser.GetText(System.Int32,GroupDocs.Parser.Options.TextOptions)" /> methods. See the usage examples there.
            </para>
        <para>
            It's used to specify the raw mode of text extraction. 
            A text in this mode is extracted in a non-accurate way but faster than in the standard mode. 
            If the raw mode doesn't support the document format, then this parameter is ignored and the standard mode is used.
            </para>
        <b>Learn more:</b>
        <list type="bullet">
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Accurate+mode">Extract text in Accurate mode</a>
          </item>
          <item>
            <a target="_blank" href="https://docs.groupdocs.com/display/parsernet/Extract+text+in+Raw+mode">Extract text in Raw mode</a>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Options.TextOptions.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Options.TextOptions" /> class.
            </summary>
      <param name="useRawModeIfPossible">The value that indicates whether the raw mode is used.</param>
    </member>
    <member name="P:GroupDocs.Parser.Options.TextOptions.UseRawModeIfPossible">
      <summary>
            Gets the value that indicates whether the raw mode is used.
            </summary>
      <value>
        <c>true</c> if the raw mode is used; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:GroupDocs.Parser.Exceptions.CorruptedDocumentException">
      <summary>
            Thrown during document load, when the document is corrupted.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.CorruptedDocumentException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.CorruptedDocumentException" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.CorruptedDocumentException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.CorruptedDocumentException" /> class with the message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:GroupDocs.Parser.Exceptions.GroupDocsParserException">
      <summary>
            Represents the errors that occur during application execution.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.GroupDocsParserException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.GroupDocsParserException" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.GroupDocsParserException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.GroupDocsParserException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.GroupDocsParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.GroupDocsParserException" /> class with serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
    </member>
    <member name="T:GroupDocs.Parser.Exceptions.InvalidPasswordException">
      <summary>
            Thrown if a document is encrypted with a password and the password specified
            when opening the document is incorrect or missing.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.InvalidPasswordException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.InvalidPasswordException" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.InvalidPasswordException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.InvalidPasswordException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:GroupDocs.Parser.Exceptions.NamespaceDoc">
      <summary>
            The namespace provides different exceptions classes.
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Exceptions.UnsupportedDocumentFormatException">
      <summary>
            Thrown during document load, when the document format is not recognized or not supported.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.UnsupportedDocumentFormatException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.UnsupportedDocumentFormatException" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Exceptions.UnsupportedDocumentFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Exceptions.UnsupportedDocumentFormatException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:GroupDocs.Parser.Data.ContainerItem">
      <summary>
            Represents a container item like Zip archive entity, email attachment, PDF Portfolio item and so on.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Data.ContainerItem" /> class is used as return value
            of <see cref="M:GroupDocs.Parser.Parser.GetContainer" /> method. See the usage examples there.
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.ContainerItem.OpenStream">
      <summary>
            Opens the stream of the item content.
            </summary>
      <returns>A stream with the item content.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Data.ContainerItem.OpenParser">
      <summary>
            Creates the <see cref="T:GroupDocs.Parser.Parser" /> object for the item content.
            </summary>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Parser" /> class of the item content.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Data.ContainerItem.OpenParser(GroupDocs.Parser.Options.LoadOptions)">
      <summary>
            Creates the <see cref="T:GroupDocs.Parser.Parser" /> object for the item content with <see cref="T:GroupDocs.Parser.Options.LoadOptions" />.
            </summary>
      <param name="loadOptions">The options to open the item content.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Parser" /> class of the item content.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Data.ContainerItem.OpenParser(GroupDocs.Parser.Options.LoadOptions,GroupDocs.Parser.Options.ParserSettings)">
      <summary>
            Creates the <see cref="T:GroupDocs.Parser.Parser" /> object for the item content with <see cref="T:GroupDocs.Parser.Options.LoadOptions" />
            and <see cref="T:GroupDocs.Parser.Options.ParserSettings" />.
            </summary>
      <param name="loadOptions">The options to open the item content.</param>
      <param name="parserSettings">The parser settings which are used to customize data extraction.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Parser" /> class of the item content.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Data.ContainerItem.DetectFileType(GroupDocs.Parser.Options.FileTypeDetectionMode)">
      <summary>
            Detects a file type of the container item.
            </summary>
      <param name="detectionMode">Defines a mode of the file type detection.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Options.FileType" /> class; <see cref="F:GroupDocs.Parser.Options.FileType.Unknown" /> if a file type isn't detected.</returns>
      <remarks>
        <para>
          <paramref name="detectionMode" /> parameter provides the ability to control file type detection:</para>
        <list type="bullet">
          <item>
            <b>Default</b>. The file type is detected by the file extension; if the file extension isn't recognized, the file type is detected by the file content.
            </item>
          <item>
            <b>Extension</b>.The file type is detected only by the file extension.
            </item>
          <item>
            <b>Content</b>. The file type is detected only by the file content.
            </item>
        </list>
      </remarks>
      <example>
        <para>
            The following example shows how to detect file type of container item:
            </para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract attachments from the container
                IEnumerable&lt;ContainerItem&gt; attachments = parser.GetContainer();
                // Check if container extraction is supported
                if (attachments == null)
                {
                    Console.WriteLine("Container extraction isn't supported");
                }
                // Iterate over attachments
                foreach (ContainerItem item in attachments)
                {
                    // Detect the file type
                    Options.FileType fileType = item.DetectFileType(Options.FileTypeDetectionMode.Default);
            
                    // Print the name and file type
                    Console.WriteLine(string.Format("{0}: {1}", item.Name, fileType));
                }
            }
            </code>
      </example>
    </member>
    <member name="P:GroupDocs.Parser.Data.ContainerItem.Name">
      <summary>
            Gets the name of the item.
            </summary>
      <value>A string value that represents the file name of the item (without a directory).</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.ContainerItem.Directory">
      <summary>
            Gets the directory of the item.
            </summary>
      <value>A string value that represents the directory of the item (without a file name).</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.ContainerItem.FilePath">
      <summary>
            Gets the full path of the item.
            </summary>
      <value>A string value that represents the full path of the item.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.ContainerItem.Size">
      <summary>
            Gets the size of the item.
            </summary>
      <value>An integer value that represents the size of the item in bytes.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.ContainerItem.Metadata">
      <summary>
            Gets the collection of metadata items.
            </summary>
      <value>A collection of <see cref="T:GroupDocs.Parser.Data.MetadataItem" /> objects; empty if metadata isn't set.</value>
      <remarks>
        <para>
            These metadata refer to a container element itself, not a document. Depending on the container type
            metadata can contain the following items:
            </para>
        <para>
          <b>Email Attachments</b>
        </para>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>content-type</term>
            <description>The MIME type of the attachment content.</description>
          </item>
        </list>
        <para>
          <b>ZIP Archives</b>
        </para>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>date</term>
            <description>The time and date at which the file indicated by the Zip Entry was last modified.</description>
          </item>
        </list>
        <para>
          <b>Outlook Storage</b>
        </para>
        <list type="table">
          <listheader>
            <term>Name</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>date</term>
            <description>The time and date at which the Outlook Storage item was last modified.</description>
          </item>
          <item>
            <term>email-sender</term>
            <description>The value of "sender" field.</description>
          </item>
          <item>
            <term>email-to</term>
            <description>The value of "to" field.</description>
          </item>
          <item>
            <term>subject</term>
            <description>The value of "subject" field.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:GroupDocs.Parser.Data.DocumentData">
      <summary>
            Represents data of the document. It consists of <see cref="T:GroupDocs.Parser.Data.FieldData" /> objects
            which contain field data from document.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Data.DocumentData" /> class is used as return value
            of <see cref="M:GroupDocs.Parser.Parser.ParseByTemplate(GroupDocs.Parser.Templates.Template)" /> and <see cref="M:GroupDocs.Parser.Parser.ParseForm" /> methods.
            See the usage examples there.
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.DocumentData.#ctor(System.Collections.Generic.IEnumerable{GroupDocs.Parser.Data.FieldData})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.FieldData" /> class.
            </summary>
      <param name="fields">The collection of fields data.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.DocumentData.GetFieldsByName(System.String)">
      <summary>
            Returns the collection of field data where the name is equal to <paramref name="fieldName" />.
            </summary>
      <param name="fieldName">The name of the field.</param>
      <returns>A collection of <see cref="T:GroupDocs.Parser.Data.FieldData" /> objects; empty collection if no field data is found.</returns>
      <example>
        <para>Find fields by a field name:</para>
        <code lang="c#">
            // Get all the fields with "Address" name
            IList&lt;FieldData&gt; addressFields = data.GetFieldsByName("Address");
            if(addressFields.Count == 0) {
                Console.WriteLine("Address not found");
            }
            else {
                Console.WriteLine("Address");
                // Iterate over the fields collection
                for (int i = 0; i &lt; addressFields.Count; i++) {
                    PageTextArea area = addressFields[i].PageArea as PageTextArea;
                    Console.WriteLine(area == null ? "Not a template field" : area.Text);       
                     
                    // If it's a related field:
                    if(addressFields[i].LinkedField != null) {
                        Console.Write("Linked to ");
                        PageTextArea linkedArea = addressFields[i].LinkedField.PageArea as PageTextArea;
                        Console.WriteLine(area == null ? "Not a template field" : area.Text);           
                    }
                }
            }
            </code>
        <para>
          <see cref="T:GroupDocs.Parser.Data.FieldData" /> class represents field data. Depending on the field <see cref="P:GroupDocs.Parser.Data.FieldData.PageArea" /> property
            can contain any of the inheritors of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class. For example, <see cref="M:GroupDocs.Parser.Parser.ParseForm" /> method
            extracts only text fields.
            </para>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Data.DocumentData.GetEnumerator">
      <summary>
            Returns an enumerator for the fields data.
            </summary>
      <returns>An enumerator for the fields data.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Data.DocumentData.Count">
      <summary>
            Gets the total number of the fields data.
            </summary>
      <value>An integer value that represents the total number of the fields data.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.DocumentData.Item(System.Int32)">
      <summary>
            Gets the field data by an index.
            </summary>
      <param name="index">The zero-based index of the field.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Data.FieldData" /> class.</returns>
      <example>
        <para>Iteration via all the fields:</para>
        <code lang="c#">
            for (int i = 0; i &lt; data.Count; i++)
            {
                Console.Write(data[i].Name + ": ");
                PageTextArea area = data[i].PageArea as PageTextArea;
                Console.WriteLine(area == null ? "Not a template field" : area.Text);
            }
            </code>
        <para>
          <see cref="T:GroupDocs.Parser.Data.FieldData" /> class represents field data. Depending on the field <see cref="P:GroupDocs.Parser.Data.FieldData.PageArea" /> property
            can contain any of the inheritors of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class. For example, <see cref="M:GroupDocs.Parser.Parser.ParseForm" /> method
            extracts only text fields:
            </para>
        <code lang="c#">
            // Create the parser
            using (Parser parser = new Parser(filePath))
            {
                // Extract data from PDF Form
                DocumentData data = parser.ParseForm();
                // Iterate over extracted fields
                for (int i = 0; i &lt; data.Count; i++)
                {
                    // Get the extracted field
                    FieldData field = data[i];
                    // Print the field name
                    Console.Write(field.Name + ": ");
                    // Check if the field value is a text and print it
                    PageTextArea area = field.PageArea as PageTextArea;
                    Console.WriteLine(area == null ? "Not a template field" : area.Text);
                }
            }
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Parser.Data.FieldData">
      <summary>
            Represents field data such as a name, a page index, a field value and so on.
            Depending on the field the value can be a text, an image, a table and so on.
            </summary>
      <remarks>
            The instances of <see cref="T:GroupDocs.Parser.Data.FieldData" /> class are used in <see cref="T:GroupDocs.Parser.Data.DocumentData" /> collection.    
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.FieldData.#ctor(System.String,GroupDocs.Parser.Data.PageArea,GroupDocs.Parser.Data.FieldData)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.FieldData" /> class.
            </summary>
      <param name="name">The name of the field.</param>
      <param name="pageArea">The value of the field.</param>
      <param name="linkedDataField">The field which is linked to the field.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.FieldData.#ctor(System.String,GroupDocs.Parser.Data.PageArea)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.FieldData" /> class.
            </summary>
      <param name="name">The name of the field.</param>
      <param name="pageArea">The value of the field.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.FieldData.Name">
      <summary>
            Gets the field name.
            </summary>
      <value>An uppercase string value that represents the name of the field.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.FieldData.PageIndex">
      <summary>
            Gets the page index.
            </summary>
      <value>A zero-based index of the page that contains the field.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.FieldData.PageArea">
      <summary>
            Gets the value of the field.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class that represents the value of the field.</value>
      <example>
        <para>
            Depending on field <see cref="P:GroupDocs.Parser.Data.FieldData.PageArea" /> property
            can contain any of the inheritors of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class. 
            For example, <see cref="M:GroupDocs.Parser.Parser.ParseForm" /> method extracts only text fields.
            </para>
        <code lang="c#">
            // Get the field data
            FieldData field = data[i];
            // Check if the field data contains a text
            if(field.PageArea is PageTextArea)
            {
                // Print the field text value
                Console.WriteLine(field.Text);
            }
            </code>
      </example>
    </member>
    <member name="P:GroupDocs.Parser.Data.FieldData.Text">
      <summary>
            Gets the text.
            </summary>
      <value>A string value that represents a value of the field text; <c>null</c> if <see cref="P:GroupDocs.Parser.Data.FieldData.PageArea" /> property isn't <see cref="T:GroupDocs.Parser.Data.PageTextArea" />.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.FieldData.LinkedField">
      <summary>
            Gets the linked field.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.FieldData" /> class that represents the field which is linked to the field; <c>null</c> if it isn't set.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.HighlightItem">
      <summary>
            Represents a highlight, a part of the text which is usually used to explain the context of the found text in the search functionality.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Data.HighlightItem" /> class is used as return value 
            of <see cref="M:GroupDocs.Parser.Parser.GetHighlight(System.Int32,System.Boolean,GroupDocs.Parser.Options.HighlightOptions)" /> method,
            <see cref="P:GroupDocs.Parser.Data.SearchResult.LeftHighlightItem" /> and <see cref="P:GroupDocs.Parser.Data.SearchResult.RightHighlightItem" /> properties.
            See the usage examples there.
            </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Data.HighlightItem.Position">
      <summary>
            Gets the position in the document text.
            </summary>
      <value>A zero-based index of the start position of the highlight.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.HighlightItem.Text">
      <summary>
            Gets the text of the highlight.
            </summary>
      <value>A string value that represents the text of the highlight.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.MetadataItem">
      <summary>
            Represents a metadata item which is used in container items and metadata extraction functionality.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Data.MetadataItem" /> class is used as return value 
            of <see cref="M:GroupDocs.Parser.Parser.GetMetadata" /> method and as a item in <see cref="P:GroupDocs.Parser.Data.ContainerItem.Metadata" /> collection.
            See the usage examples there.
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.MetadataItem.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.MetadataItem" /> class.
            </summary>
      <param name="name">The name of the metadata item.</param>
      <param name="value">The value of the metadata item.</param>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Data.MetadataItem" /> class is used as return value
            of <see cref="M:GroupDocs.Parser.Parser.GetMetadata" /> method.
            </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Data.MetadataItem.Name">
      <summary>
            Gets the name of the metadata item.
            </summary>
      <value>A string value that represents the name of the metadata item.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.MetadataItem.Value">
      <summary>
            Gets the value of the metadata item.
            </summary>
      <value>A string value that represents the value of the metadata item.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.NamespaceDoc">
      <summary>
            The namespace provides classes which represent parsing results. 
            </summary>
    </member>
    <member name="T:GroupDocs.Parser.Data.Page">
      <summary>
            Represents the document page information such as page index and page size. 
            It's used to represent the page that contains inheritors of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class
            in the parsing by template functionality.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.Page.#ctor(System.Int32,GroupDocs.Parser.Data.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.Page" /> class.
            </summary>
      <param name="index">The page index.</param>
      <param name="size">The page size.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.Page.Index">
      <summary>
            Gets the page index.
            </summary>
      <value>A zero-based index of the page.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Page.Size">
      <summary>
            Gets the page size.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Size" /> class that represents the size of the page.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageArea">
      <summary>
            Represents an abstract base class for page areas
            which are used to represent blocks on the document page in the parsing by template functionality.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageArea.#ctor(GroupDocs.Parser.Data.Page,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageArea" /> class.
            </summary>
      <param name="page">The page that contains the area.</param>
      <param name="rectangle">The rectangular area that contains the area.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageArea.Rectangle">
      <summary>
            Gets the rectangular area.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class that represents the rectangular area of the page that contains the page area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageArea.Page">
      <summary>
            Gets the document page information such as page index and page size.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Page" /> class that represents the page that contains the page area.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageBarcodeArea">
      <summary>
            Represents a page barcode area which is used to represent a barcode value in the parsing by template functionality.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageBarcodeArea.#ctor(System.String,System.String,GroupDocs.Parser.Data.Page,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageBarcodeArea" /> class.
            </summary>
      <param name="value">The value of the barcode.</param>
      <param name="codeTypeName">The type name of the barcode.</param>
      <param name="page">The page that contains the barcode area.</param>
      <param name="rectangle">The rectangular area that contains the barcode area.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageBarcodeArea.Value">
      <summary>
            Gets the barcode value.
            </summary>
      <value>A string value that represents a value of the barcode page area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageBarcodeArea.CodeTypeName">
      <summary>
            Gets the name of the barcode type.
            </summary>
      <value>A string value than represents a type name of the barcode.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageGroupArea">
      <summary>
            Represents a group of page areas
            which is used to group different types of blocks of the document page in the parsing by template functionality. 
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageGroupArea.#ctor(System.Collections.Generic.IEnumerable{GroupDocs.Parser.Data.PageArea},GroupDocs.Parser.Data.Page)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageGroupArea" /> class.
            </summary>
      <param name="areas">The collection of page areas to be grouped.</param>
      <param name="page">The page that contains the area.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageGroupArea.Areas">
      <summary>
            Gets the collection of grouped page areas.
            </summary>
      <value>A collection of <see cref="T:GroupDocs.Parser.Data.PageArea" /> objects.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageHyperlinkArea">
      <summary>
            Represents a page area which is used to represent a hyperlink on the page.
            </summary>
      <remarks>
        <para>An instance of <see cref="T:GroupDocs.Parser.Data.PageHyperlinkArea" /> class is used as return value
            of the following methods:</para>
        <list type="bullet">
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks(System.Int32)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks(GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetHyperlinks(System.Int32,GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
        </list>
        <para>See the usage examples there.</para>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageHyperlinkArea.#ctor(System.String,System.String,GroupDocs.Parser.Data.Page,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageHyperlinkArea" /> class.
            </summary>
      <param name="text">The hyperlink text.</param>
      <param name="url">The hyperlink URL.</param>
      <param name="page">The page that contains the hyperlink.</param>
      <param name="rectangle">The rectangular area that contains the hyperlink.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageHyperlinkArea.Text">
      <summary>
            Gets the hyperlink text.
            </summary>
      <value>A string value that represents hyperlink text.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageHyperlinkArea.Url">
      <summary>
            Gets the hyperlink URL.
            </summary>
      <value>A string value that represents hyperlink URL.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageImageArea">
      <summary>
            Represents a page image area which is used to represent an image on the page in the parsing by template functionality
            or an image attachment if images are extracted from emails or Zip archives.
            </summary>
      <remarks>
        <para>An instance of <see cref="T:GroupDocs.Parser.Data.PageImageArea" /> class is used as return value
            of the following methods:</para>
        <list type="bullet">
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetImages" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetImages(GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetImages(System.Int32)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetImages(System.Int32,GroupDocs.Parser.Options.PageAreaOptions)" />
          </item>
        </list>
        <para>See the usage examples there.</para>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageImageArea.#ctor(System.IO.Stream,GroupDocs.Parser.Options.FileType,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageImageArea" /> class.
            </summary>
      <param name="imageStream">The stream of the image.</param>
      <param name="fileType">The format of the image.</param>
      <param name="rotation">The rotation angle of the image.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageImageArea.#ctor(System.IO.Stream,GroupDocs.Parser.Options.FileType,System.Double,GroupDocs.Parser.Data.Page,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageImageArea" /> class.
            </summary>
      <param name="imageStream">The stream of the image.</param>
      <param name="fileType">The format of the image.</param>
      <param name="rotation">The rotation angle of the image.</param>
      <param name="page">The page that contains the image.</param>
      <param name="rectangle">The rectangular area that contains the image.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageImageArea.GetImageStream">
      <summary>
            Returns the image stream.
            </summary>
      <returns>A stream with the image.</returns>
      <example>
        <para>The following example shows how to save images to files:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract images from document
                IEnumerable&lt;PageImageArea&gt; images = parser.GetImages();
                
                // Check if images extraction is supported
                if (images == null)
                {
                    Console.WriteLine("Page images extraction isn't supported");
                    return;
                }
            
                // Iterate over images
                foreach (PageImageArea image in images)
                {
                    // Open the image stream
                    using (Stream imageStream = image.GetImageStream())
                    {
                        // Create the file to save image
                        using (Stream destStream = File.Create(Guid.NewGuid().ToString() + image.FileType.Extension))
                        {
                            byte[] buffer = new byte[4096];
                            int readed = 0;
            
                            do
                            {
                                // Read data from the image stream
                                readed = imageStream.Read(buffer, 0, buffer.Length);
            
                                if (readed &gt; 0)
                                {
                                    // Write data to the file stream
                                    destStream.Write(buffer, 0, readed);
                                }
                            }
                            while (readed &gt; 0);
                        }
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageImageArea.GetImageStream(GroupDocs.Parser.Options.ImageOptions)">
      <summary>
            Returns the image stream in a different format.
            </summary>
      <param name="options">The options which are used to extract the image.</param>
      <returns>A stream with the image.</returns>
      <example>
        <para>The following example shows how to save images to files in a different format:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract images from document
                IEnumerable&lt;PageImageArea&gt; images = parser.GetImages();
                
                // Check if images extraction is supported
                if (images == null)
                {
                    Console.WriteLine("Page images extraction isn't supported");
                    return;
                }
            
                // Create the options to save images in PNG format
                ImageOptions options = new ImageOptions(ImageFormat.Png);
                
                // Iterate over images
                foreach (PageImageArea image in images)
                {
                    // Open the image stream
                    using (Stream imageStream = image.GetImageStream(options))
                    {
                        // Create the file to save image
                        using (Stream destStream = File.Create(Guid.NewGuid().ToString() + ".png"))
                        {
                            byte[] buffer = new byte[4096];
                            int readed = 0;
            
                            do
                            {
                                // Read data from the image stream
                                readed = imageStream.Read(buffer, 0, buffer.Length);
            
                                if (readed &gt; 0)
                                {
                                    // Write data to the file stream
                                    destStream.Write(buffer, 0, readed);
                                }
                            }
                            while (readed &gt; 0);
                        }
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageImageArea.Save(System.String)">
      <summary>
             Saves the image to the file.
             </summary>
      <param name="filePath">The path to the file.</param>
      <example>
        <para>The following example shows how to save images to files:</para>
        <code lang="c#">
             // Create an instance of Parser class
             using (Parser parser = new Parser(filePath))
             {
                 // Extract images from document
                 IEnumerable&lt;PageImageArea&gt; images = parser.GetImages();
                 
                 // Check if images extraction is supported
                 if (images == null)
                 {
                     Console.WriteLine("Page images extraction isn't supported");
                     return;
                 }
            
                 // Iterate over images
                 foreach (PageImageArea image in images)
                 {
                     // Save the image to the file
                     image.Save(Guid.NewGuid().ToString() + image.FileType.Extension);
                 }
             }
             </code>
      </example>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageImageArea.Save(System.String,GroupDocs.Parser.Options.ImageOptions)">
      <summary>
            Saves the image to the file in a different format.
            </summary>
      <param name="filePath">The path to the file.</param>
      <param name="options">The options which are used to save the image.</param>
      <example>
        <para>The following example shows how to save images to files in a different format:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(filePath))
            {
                // Extract images from document
                IEnumerable&lt;PageImageArea&gt; images = parser.GetImages();
                
                // Check if images extraction is supported
                if (images == null)
                {
                    Console.WriteLine("Page images extraction isn't supported");
                    return;
                }
            
                // Create the options to save images in PNG format
                ImageOptions options = new ImageOptions(ImageFormat.Png);
                
                // Iterate over images
                foreach (PageImageArea image in images)
                {
                    // Save the image to the png file
                    image.Save(Guid.NewGuid().ToString() + ".png", options);
                }
            }
            </code>
      </example>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageImageArea.FileType">
      <summary>
            Gets the format of the image.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Options.FileType" /> class that represents the format of the image.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageImageArea.Rotation">
      <summary>
            Gets the rotation angle of the image.
            </summary>
      <value>A double value that represents the rotation angle of the image.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageTableArea">
      <summary>
            Represents a table page area which is used to represent a table in the parsing by template functionality.
            </summary>
      <remarks>
        <see cref="T:GroupDocs.Parser.Data.PageTableArea" /> class is used to organize inheritors of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class
            in table structure.
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTableArea.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{GroupDocs.Parser.Data.PageTableAreaCell},GroupDocs.Parser.Data.Page,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageTableArea" /> class.
            </summary>
      <param name="rows">The collection of row heights.</param>
      <param name="columns">The collection of column widths.</param>
      <param name="cells">The collection of cells.</param>
      <param name="page">The page that contains the table.</param>
      <param name="rectangle">The rectangular area that contains the table.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTableArea.GetRowHeight(System.Int32)">
      <summary>
            Returns the row height.
            </summary>
      <param name="rowIndex">The zero-based index of the row.</param>
      <returns>A double value that represents the height of the row.</returns>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTableArea.GetColumnWidth(System.Int32)">
      <summary>
            Returns the column width.
            </summary>
      <param name="columnIndex">The zero-based index of the column.</param>
      <returns>A double value that represents the width of the column.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableArea.RowCount">
      <summary>
            Gets the total number of the table rows.
            </summary>
      <value>An integer value that contains the total number of the table rows.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableArea.ColumnCount">
      <summary>
            Gets the total number of the table colums.
            </summary>
      <value>An integer value that contains the total number of the table columns.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableArea.Item(System.Int32,System.Int32)">
      <summary>
            Gets the table cell by row and column indexes.
            </summary>
      <param name="rowIndex">The zero-based index of the cell row.</param>
      <param name="columnIndex">The zero-based index of the cell column.</param>
      <returns>An instance of <see cref="T:GroupDocs.Parser.Data.PageTableAreaCell" /> class; <c>null</c> if no cell is found.</returns>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageTableAreaCell">
      <summary>
            Represents a table cell which is used in <see cref="T:GroupDocs.Parser.Data.PageTableArea" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTableAreaCell.#ctor(System.Int32,System.Int32,GroupDocs.Parser.Data.PageArea,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageTableAreaCell" /> class.
            </summary>
      <param name="rowIndex">The zero-based index of the row.</param>
      <param name="columnIndex">The zero-based index of the column.</param>
      <param name="pageArea">The value of the table cell.</param>
      <param name="rowSpan">The total number of rows that contain the table cell.</param>
      <param name="columnSpan">The total number of columns that contain the table cell.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTableAreaCell.#ctor(System.Int32,System.Int32,GroupDocs.Parser.Data.PageArea)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageTableAreaCell" /> class.
            </summary>
      <param name="rowIndex">The zero-based index of the row.</param>
      <param name="columnIndex">The zero-based index of the column.</param>
      <param name="pageArea">The value of the table cell.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableAreaCell.RowIndex">
      <summary>
            Gets the row index.
            </summary>
      <value>A zero-based index of the first row that contains the table cell.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableAreaCell.ColumnIndex">
      <summary>
            Gets the column index.
            </summary>
      <value>A zero-based index of the first column that contains the table cell.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableAreaCell.RowSpan">
      <summary>
            Gets the total number of rows that contain the table cell.
            </summary>
      <value>A positive integer value that represents the total number of rows that contain the table cell.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableAreaCell.ColumnSpan">
      <summary>
            Gets the total number of columns that contain the table cell.
            </summary>
      <value>A positive integer value that represents the total number of columns that contain the table cell.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableAreaCell.PageArea">
      <summary>
            Gets the table cell value.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class that represents a value of the table cell.</value>
      <remarks>
            Depending on cell <see cref="P:GroupDocs.Parser.Data.PageTableAreaCell.PageArea" /> property
            can contain any of the inheritors of <see cref="T:GroupDocs.Parser.Data.PageArea" /> class.
            </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTableAreaCell.Text">
      <summary>
            Gets the table cell text value.
            </summary>
      <value>
            A string that represents a text value of the cell; 
            <c>null</c> if cell doesn't contain a text value.
            </value>
    </member>
    <member name="T:GroupDocs.Parser.Data.PageTextArea">
      <summary>
            Represents a page text area which is used to represent a text value in the parsing by template or parsing form functionality.
            </summary>
      <remarks>
        <para>An instance of <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> class is used as return value
            of the following methods:</para>
        <list type="bullet">
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetTextAreas" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetTextAreas(GroupDocs.Parser.Options.PageTextAreaOptions)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetTextAreas(System.Int32)" />
          </item>
          <item>
            <see cref="M:GroupDocs.Parser.Parser.GetTextAreas(System.Int32,GroupDocs.Parser.Options.PageTextAreaOptions)" />
          </item>
        </list>
        <para>
            Also an instance of <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> class is used as value
            of <see cref="P:GroupDocs.Parser.Data.FieldData.PageArea" /> property.
            </para>
        <para>See the usage examples there.</para>
        <para>
            The text area can be single or composite. 
            In the first case it contains a text which is bounded by a rectangular area. 
            In the second case it contains other text areas; text and table properties are calculated by child text areas.
            </para>
      </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTextArea.#ctor(System.String,GroupDocs.Parser.Data.Page,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> class.
            </summary>
      <param name="text">The value of the text.</param>
      <param name="page">The page that contains the text area.</param>
      <param name="rectangle">The rectangular area that contains the text area.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTextArea.#ctor(System.String,System.Nullable{System.Double},GroupDocs.Parser.Data.TextStyle,GroupDocs.Parser.Data.Page,GroupDocs.Parser.Data.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> class.
            </summary>
      <param name="text">The value of the text.</param>
      <param name="baseLine">The base line of the text.</param>
      <param name="textStyle">The style of the text.</param>
      <param name="page">The page that contains the text area.</param>
      <param name="rectangle">The rectangular area that contains the text area.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTextArea.#ctor(System.Collections.Generic.IEnumerable{GroupDocs.Parser.Data.PageTextArea},GroupDocs.Parser.Data.Page)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.PageTextArea" /> class.
            </summary>
      <param name="areas">The collecton of child text page areas.</param>
      <param name="page">The page that contains the text area.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.PageTextArea.ToString">
      <summary>
            Converts the value of this instance to <see cref="T:System.String" />.
            </summary>
      <returns>A string whose value is the same as this instance.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTextArea.Text">
      <summary>
            Gets the text.
            </summary>
      <value>A string value that represents a value of the text page area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTextArea.BaseLine">
      <summary>
            Gets the base line.
            </summary>
      <value>A double value that represents the base line.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTextArea.TextStyle">
      <summary>
            Gets the text style such as font size, font name an so on.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.TextStyle" /> class that represents the text style.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.PageTextArea.Areas">
      <summary>
            Gets the collection of child text page areas.
            </summary>
      <value>A collection of child text page areas; empty if the text page area hasn't children.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.Point">
      <summary>
            Represents a point.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.Point.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.Point" /> class.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.Point.ToString">
      <summary>
            Converts the value of this instance to <see cref="T:System.String" />.
            </summary>
      <returns>A string whose value is the same as this instance.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Data.Point.X">
      <summary>
            Gets the x-coordinate.
            </summary>
      <value>A double value that represents the x-coordinate.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Point.Y">
      <summary>
            Gets the y-coordinate.
            </summary>
      <value>A double value that represents the y-coordinate.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.Rectangle">
      <summary>
            Represents a rectangular area.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class.
            </summary>
      <param name="left">The x-coordinate of the left edge of the rectangular area.</param>
      <param name="top">The y-coordinate of the top edge of the rectangular area.</param>
      <param name="right">The x-coordinate of the right edge of the rectangular area.</param>
      <param name="bottom">The y-coordinate of the bottom edge of the rectangular area.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.Rectangle.#ctor(GroupDocs.Parser.Data.Point,GroupDocs.Parser.Data.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.Rectangle" /> class.
            </summary>
      <param name="position">The coordinates of the upper-left corner of the rectangular area.</param>
      <param name="size">The size of the rectangular area.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.Rectangle.ToString">
      <summary>
            Converts the value of this instance to <see cref="T:System.String" />.
            </summary>
      <returns>A string whose value is the same as this instance.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Data.Rectangle.Left">
      <summary>
            Gets the x-coordinate of the left edge of the rectangular area.
            </summary>
      <value>A double value that represents the x-coordinate of the left edge of the rectangular area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Rectangle.Top">
      <summary>
            Gets the y-coordinate of the top edge of the rectangular area.
            </summary>
      <value>A double value that represents the y-coordinate of the top edge of the rectangular area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Rectangle.Right">
      <summary>
            Gets the x-coordinate of the right egde of the rectangular area.
            </summary>
      <value>A double value that represents the x-coordinate of the right edge of the rectangular area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Rectangle.Bottom">
      <summary>
            Gets the y-coordinate of the bottom edge of the rectangular area.
            </summary>
      <value>A double value that represents the y-coordinate of the bottom edge of the rectangular area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Rectangle.Position">
      <summary>
            Gets the coordinates of the upper-left corner of the rectangular area.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Point" /> class that represents the coordinates of the upper-left corner of the rectangular area.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Rectangle.Size">
      <summary>
            Gets the size.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.Size" /> class that represents the size of the rectangular area.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.SearchResult">
      <summary>
            Represents the search result in the search functionality.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Data.SearchResult" /> class is used as return value
            of <see cref="M:GroupDocs.Parser.Parser.Search(System.String)" /> and <see cref="M:GroupDocs.Parser.Parser.Search(System.String,GroupDocs.Parser.Options.SearchOptions)" /> methods.
            See the usage examples there.
            </remarks>
    </member>
    <member name="P:GroupDocs.Parser.Data.SearchResult.Position">
      <summary>
            Gets the position in the document text.
            </summary>
      <value>
            A zero-based index of the start position of the search result.
            Depeding on <see cref="P:GroupDocs.Parser.Options.SearchOptions.SearchByPages" /> property value this index starts from 
            the document start or the document page start.
            </value>
    </member>
    <member name="P:GroupDocs.Parser.Data.SearchResult.Text">
      <summary>
            Gets the text.
            </summary>
      <value>A string value that respresents the found text.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.SearchResult.PageIndex">
      <summary>
            Gets the page index where the text is found.
            </summary>
      <value>A zero-based index of the page where the text is found; <c>null</c> if the seach is performed on the whole document text.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.SearchResult.LeftHighlightItem">
      <summary>
            Gets the left highlight.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.HighlightItem" /> class; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.SearchResult.RightHighlightItem">
      <summary>
            Gets the right highlight.
            </summary>
      <value>An instance of <see cref="T:GroupDocs.Parser.Data.HighlightItem" /> class; <c>null</c> if it isn't set.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.Size">
      <summary>
            Represents a size.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.Size.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.Size" /> class.
            </summary>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.Size.ToString">
      <summary>
            Converts the value of this instance to <see cref="T:System.String" />.
            </summary>
      <returns>A string whose value is the same as this instance.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Data.Size.Width">
      <summary>
            Gets the width.
            </summary>
      <value>A double value that represents the width in pixels.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.Size.Height">
      <summary>
            Gets the height.
            </summary>
      <value>A double value that represents the height in pixels.</value>
    </member>
    <member name="T:GroupDocs.Parser.Data.TextStyle">
      <summary>
            Represents the style of the text such as a font name, a font size and so on.
            </summary>
    </member>
    <member name="M:GroupDocs.Parser.Data.TextStyle.#ctor(System.String,System.String,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.TextStyle" /> class.
            </summary>
      <param name="name">The name of the style.</param>
      <param name="fontName">The name of the font.</param>
      <param name="fontSize">The size of the font.</param>
      <param name="isBold">The value that indicates whether the font is bold.</param>
      <param name="isItalic">The value that indicates whether the font is italic.</param>
    </member>
    <member name="P:GroupDocs.Parser.Data.TextStyle.Name">
      <summary>
            Gets the style name.
            </summary>
      <value>A string value that represents the style name.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.TextStyle.FontName">
      <summary>
            Gets the font name.
            </summary>
      <value>A string value that represents the font name.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.TextStyle.FontSize">
      <summary>
            Gets the font size.
            </summary>
      <value>A double value that represents the font size.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.TextStyle.IsBold">
      <summary>
            Gets the value that indicates whether the font is bold.
            </summary>
      <returns>
        <c>true</c> if the font is bold; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GroupDocs.Parser.Data.TextStyle.IsItalic">
      <summary>
            Gets a value that indicates whether the font is italic.
            </summary>
      <returns>
        <c>true</c> if the font is italic; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GroupDocs.Parser.Data.TocItem">
      <summary>
            Represents the item which is used in the table of contents extraction functionality.
            </summary>
      <remarks>
            An instance of <see cref="T:GroupDocs.Parser.Data.TocItem" /> class is used as return value
            of <see cref="M:GroupDocs.Parser.Parser.GetToc" /> methods. See the usage examples there.
            </remarks>
    </member>
    <member name="M:GroupDocs.Parser.Data.TocItem.#ctor(System.Int32,System.String,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Parser.Data.TocItem" /> class.
            </summary>
      <param name="depth">The depth level of the item.</param>
      <param name="text">The text of the item.</param>
      <param name="pageIndex">The index of the page referenced by the item</param>
    </member>
    <member name="M:GroupDocs.Parser.Data.TocItem.ExtractText">
      <summary>
            Extracts a text from the document to which <see cref="T:GroupDocs.Parser.Data.TocItem" /> object refers.
            </summary>
      <returns>An instance of <see cref="T:System.IO.TextReader" /> class with the extracted text.</returns>
      <example>
        <para>The following example how to extract a text by the an item of table of contents:</para>
        <code lang="c#">
            // Create an instance of Parser class
            using (Parser parser = new Parser(Constants.SampleDocxWithToc))
            {
                // Get table of contents
                IEnumerable&lt;TocItem&gt; tocItems = parser.GetToc();
                // Check if toc extraction is supported
                if (tocItems == null)
                {
                    Console.WriteLine("Table of contents extraction isn't supported");
                }
                // Iterate over items
                foreach (TocItem tocItem in tocItems)
                {
                    // Print the text of the chapter
                    using (TextReader reader = tocItem.ExtractText())
                    {
                        Console.WriteLine("----");
                        Console.WriteLine(reader.ReadToEnd());
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="P:GroupDocs.Parser.Data.TocItem.Depth">
      <summary>
            Gets the depth level.
            </summary>
      <value>An integer value that represents the depth level of the item.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.TocItem.PageIndex">
      <summary>
            Gets the page index.
            </summary>
      <value>An integer value that represents the index of the page referenced by the item; <c>null</c> if it isn't set.</value>
    </member>
    <member name="P:GroupDocs.Parser.Data.TocItem.Text">
      <summary>
            Gets the text.
            </summary>
      <value>A string value that represents the text of the item.</value>
    </member>
  </members>
</doc>